{"target": "LLNL@@lbann", "extractors": [{"deps": [{"depname": "threads", "version": null, "version_op": null, "unified_name": "threads", "extractor_type": "cmake", "context": "find_package(threads required)", "confidence": "High"}, {"depname": "clara", "version": null, "version_op": null, "unified_name": "clara", "extractor_type": "cmake", "context": "find_package(clara required)", "confidence": "High"}, {"depname": "cereal", "version": null, "version_op": null, "unified_name": "cereal", "extractor_type": "cmake", "context": "find_package(cereal config required names cereal cereal)", "confidence": "High"}, {"depname": "hydrogen", "version": "1.5.0", "version_op": null, "unified_name": "hydrogen", "extractor_type": "cmake", "context": "find_package(hydrogen 1.5.0 config required)", "confidence": "High"}, {"depname": "dihydrogen", "version": "0.3.0", "version_op": null, "unified_name": "dihydrogen", "extractor_type": "cmake", "context": "find_package(dihydrogen 0.3.0 config required components meta patterns distconv)", "confidence": "High"}, {"depname": "dihydrogen", "version": null, "version_op": null, "unified_name": "dihydrogen", "extractor_type": "cmake", "context": "find_package(dihydrogen config required components meta patterns)", "confidence": "High"}, {"depname": "fftw", "version": "3.3", "version_op": null, "unified_name": "fftw", "extractor_type": "cmake", "context": "find_package(fftw 3.3 required)", "confidence": "High"}, {"depname": "opencv", "version": null, "version_op": null, "unified_name": "opencv", "extractor_type": "cmake", "context": "find_package(opencv config required)", "confidence": "High"}, {"depname": "dnnl", "version": "1.6.0", "version_op": null, "unified_name": "dnnl", "extractor_type": "cmake", "context": "find_package(dnnl 1.6.0 config)", "confidence": "High"}, {"depname": "dnnl", "version": "2.0.0", "version_op": null, "unified_name": "dnnl", "extractor_type": "cmake", "context": "find_package(dnnl 2.0.0 required config)", "confidence": "High"}, {"depname": "cudatoolkit", "version": "11.0.0", "version_op": null, "unified_name": "cudatoolkit", "extractor_type": "cmake", "context": "find_package(cudatoolkit 11.0.0 required)", "confidence": "High"}, {"depname": "cudnn", "version": null, "version_op": null, "unified_name": "cudnn", "extractor_type": "cmake", "context": "find_package(cudnn required)", "confidence": "High"}, {"depname": "cutensor", "version": null, "version_op": null, "unified_name": "cutensor", "extractor_type": "cmake", "context": "find_package(cutensor)", "confidence": "High"}, {"depname": "cutt", "version": null, "version_op": null, "unified_name": "cutt", "extractor_type": "cmake", "context": "find_package(cutt)", "confidence": "High"}, {"depname": "nvshmem", "version": null, "version_op": null, "unified_name": "nvshmem", "extractor_type": "cmake", "context": "find_package(nvshmem required)", "confidence": "High"}, {"depname": "hip", "version": null, "version_op": null, "unified_name": "hip", "extractor_type": "cmake", "context": "find_package(hip config required)", "confidence": "High"}, {"depname": "miopen", "version": null, "version_op": null, "unified_name": "miopen", "extractor_type": "cmake", "context": "find_package(miopen config required)", "confidence": "High"}, {"depname": "rocfft", "version": null, "version_op": null, "unified_name": "rocfft", "extractor_type": "cmake", "context": "find_package(rocfft config required)", "confidence": "High"}, {"depname": "roctracer", "version": null, "version_op": null, "unified_name": "roctracer", "extractor_type": "cmake", "context": "find_package(roctracer module components roctracer roctx)", "confidence": "High"}, {"depname": "cutt", "version": null, "version_op": null, "unified_name": "cutt", "extractor_type": "cmake", "context": "find_package(cutt)", "confidence": "High"}, {"depname": "zstr", "version": null, "version_op": null, "unified_name": "zstr", "extractor_type": "cmake", "context": "find_package(zstr required)", "confidence": "High"}, {"depname": "zlib", "version": null, "version_op": null, "unified_name": "zlib", "extractor_type": "cmake", "context": "find_package(zlib module required)", "confidence": "High"}, {"depname": "python", "version": null, "version_op": null, "unified_name": "python", "extractor_type": "cmake", "context": "find_package(python required components interpreter development)", "confidence": "High"}, {"depname": "vtune", "version": null, "version_op": null, "unified_name": "vtune", "extractor_type": "cmake", "context": "find_package(vtune module)", "confidence": "High"}, {"depname": "cnpy", "version": null, "version_op": null, "unified_name": "cnpy", "extractor_type": "cmake", "context": "find_package(cnpy required)", "confidence": "High"}, {"depname": "hwloc", "version": null, "version_op": null, "unified_name": "hwloc", "extractor_type": "cmake", "context": "find_package(hwloc required)", "confidence": "High"}, {"depname": "conduit", "version": "0.7.0", "version_op": null, "unified_name": "conduit", "extractor_type": "cmake", "context": "find_package(conduit 0.7.0 config required)", "confidence": "High"}, {"depname": "boost", "version": null, "version_op": null, "unified_name": "boost", "extractor_type": "cmake", "context": "find_package(boost)", "confidence": "High"}, {"depname": "onnx", "version": null, "version_op": null, "unified_name": "onnx", "extractor_type": "cmake", "context": "find_package(onnx config required)", "confidence": "High"}, {"depname": "catch2", "version": "3.0.0", "version_op": null, "unified_name": "catch2", "extractor_type": "cmake", "context": "find_package(catch2 3.0.0 config quiet)", "confidence": "High"}, {"depname": "catch2", "version": "2.0.0", "version_op": null, "unified_name": "catch2", "extractor_type": "cmake", "context": "find_package(catch2 2.0.0 config required)", "confidence": "High"}, {"depname": "lbann", "version": null, "version_op": null, "unified_name": "lbann", "extractor_type": "cmake", "context": "project(lbann c cxx)", "confidence": ""}], "type": "cmake", "libs": [{"filenames": ["hsa-runtime64"], "version": "", "fromfile": "LLNL@@lbann/CMakeLists.txt", "content": "find_library(hsa_library hsa-runtime64\n    hints $env{rocm_path}/hsa ${rocm_path}/hsa $env{rocm_path}/hsa\n    path_suffixes lib lib64\n    doc \"hsa runtime library\"\n    no_default_path)"}, {"filenames": ["hsa-runtime64"], "version": "", "fromfile": "LLNL@@lbann/CMakeLists.txt", "content": "find_library(hsa_library hsa-runtime64)"}, {"filenames": ["dl"], "version": "", "fromfile": "LLNL@@lbann/CMakeLists.txt", "content": "find_library(dl_library dl doc \"the dynamic loader library.\")"}, {"filenames": ["git"], "version": "", "fromfile": "LLNL@@lbann/CMakeLists.txt", "content": "find_program(__git_executable git)"}]}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [{"depname": "cufft", "version": null, "version_op": null, "unified_name": "cufft", "extractor_type": "cmake", "context": "LLNL@@lbann/cmake/modules/FindcuFFT.cmake", "confidence": "High"}], "type": "cmake", "libs": [{"filenames": ["cufft"], "version": "", "fromfile": "LLNL@@lbann/cmake/modules/FindcuFFT.cmake", "content": "find_library(cufft_library cufft\n  hints ${cufft_dir} $env{cufft_dir} ${cufft_dir} $env{cufft_dir}\n  ${cuda_toolkit_root_dir} ${cuda_sdk_root_dir}\n  path_suffixes lib64 lib\n  no_default_path\n  doc \"the cufft library.\"\n  )"}, {"filenames": ["cufft"], "version": "", "fromfile": "LLNL@@lbann/cmake/modules/FindcuFFT.cmake", "content": "find_library(cufft_library cufft)"}]}, {"deps": [{"depname": "clara", "version": null, "version_op": null, "unified_name": "clara", "extractor_type": "cmake", "context": "LLNL@@lbann/cmake/modules/FindClara.cmake", "confidence": "High"}], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": [{"filenames": ["clang-format"], "version": "", "fromfile": "LLNL@@lbann/cmake/modules/LBANNClangFormat.cmake", "content": "find_program(clang_format_program clang-format\n  hints ${clang_format_dir} $env{clang_format_dir}\n  path_suffixes bin\n  doc \"the clang-format executable.\"\n  no_default_path)"}, {"filenames": ["clang-format"], "version": "", "fromfile": "LLNL@@lbann/cmake/modules/LBANNClangFormat.cmake", "content": "find_program(clang_format_program clang-format\n  hints\n  ${compiler_bin_dir}\n  ${compiler_prefix}\n  ${llvm_dir} $env{llvm_dir}\n  path_suffixes bin\n  doc \"the clang-format executable.\"\n  no_default_path)"}, {"filenames": ["clang-format"], "version": "", "fromfile": "LLNL@@lbann/cmake/modules/LBANNClangFormat.cmake", "content": "find_program(clang_format_program clang-format)"}]}, {"deps": [{"depname": "openmp", "version": null, "version_op": null, "unified_name": "openmp", "extractor_type": "cmake", "context": "find_package(openmp required cxx)", "confidence": "High"}], "type": "cmake", "libs": []}, {"deps": [{"depname": "cudnn", "version": null, "version_op": null, "unified_name": "cudnn", "extractor_type": "cmake", "context": "LLNL@@lbann/cmake/modules/FindcuDNN.cmake", "confidence": "High"}], "type": "cmake", "libs": [{"filenames": ["cudnn"], "version": "", "fromfile": "LLNL@@lbann/cmake/modules/FindcuDNN.cmake", "content": "find_library(cudnn_library cudnn\n  hints ${cudnn_dir} $env{cudnn_dir} ${cudnn_dir} $env{cudnn_dir}\n  ${cuda_toolkit_root_dir} ${cuda_sdk_root_dir}\n  path_suffixes lib64 lib\n  no_default_path\n  doc \"the cudnn library.\"\n  )"}, {"filenames": ["cudnn"], "version": "", "fromfile": "LLNL@@lbann/cmake/modules/FindcuDNN.cmake", "content": "find_library(cudnn_library cudnn)"}]}, {"deps": [{"depname": "hwloc", "version": null, "version_op": null, "unified_name": "hwloc", "extractor_type": "cmake", "context": "LLNL@@lbann/cmake/modules/FindHWLOC.cmake", "confidence": "High"}], "type": "cmake", "libs": [{"filenames": ["hwloc"], "version": "", "fromfile": "LLNL@@lbann/cmake/modules/FindHWLOC.cmake", "content": "find_library(hwloc_library hwloc\n  hints ${hwloc_dir} $env{hwloc_dir} ${_tmp_mpi_library_dirs}\n  path_suffixes lib64 lib\n  no_default_path)"}, {"filenames": ["hwloc"], "version": "", "fromfile": "LLNL@@lbann/cmake/modules/FindHWLOC.cmake", "content": "find_library(hwloc_library hwloc)"}]}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [{"depname": "fftw", "version": null, "version_op": null, "unified_name": "fftw", "extractor_type": "cmake", "context": "LLNL@@lbann/cmake/modules/FindFFTW.cmake", "confidence": "High"}, {"depname": "fftw3f", "version": null, "version_op": null, "unified_name": "fftw3f", "extractor_type": "cmake", "context": "find_package(fftw3f ${fftw_find_version} config quiet\n  hints ${fftw_dir} $env{fftw_dir}\n  path_suffixes lib64/cmake/fftw3f lib/cmake/fftw3f\n  lib64/cmake/fftw3 lib/cmake/fftw3\n  no_default_path)", "confidence": "High"}, {"depname": "fftw3f", "version": null, "version_op": null, "unified_name": "fftw3f", "extractor_type": "cmake", "context": "find_package(fftw3f ${fftw_find_version} config quiet)", "confidence": "High"}, {"depname": "pkgconfig", "version": null, "version_op": null, "unified_name": "pkgconfig", "extractor_type": "cmake", "context": "find_package(pkgconfig)", "confidence": "High"}, {"depname": "fftw3", "version": null, "version_op": null, "unified_name": "fftw3", "extractor_type": "cmake", "context": "find_package(fftw3 ${fftw_find_version} config quiet\n    hints ${fftw_dir} $env{fftw_dir}\n    path_suffixes lib64/cmake/fftw3 lib/cmake/fftw3\n    lib64/cmake/fftw3f lib/cmake/fftw3f\n    no_default_path)", "confidence": "High"}, {"depname": "fftw3", "version": null, "version_op": null, "unified_name": "fftw3", "extractor_type": "cmake", "context": "find_package(fftw3 ${fftw_find_version} config quiet)", "confidence": "High"}, {"depname": "pkgconfig", "version": null, "version_op": null, "unified_name": "pkgconfig", "extractor_type": "cmake", "context": "find_package(pkgconfig)", "confidence": "High"}, {"depname": "fftw_float", "version": "3", "version_op": null, "unified_name": "fftw_float", "extractor_type": "cmake", "context": "  set(fftw_float_version ${fftw3f_version})", "confidence": "Low"}, {"depname": "fftw_float", "version": null, "version_op": null, "unified_name": "fftw_float", "extractor_type": "cmake", "context": "      set(fftw_float_version ${pc_fftwf_version})", "confidence": "Low"}, {"depname": "fftw_double", "version": "3", "version_op": null, "unified_name": "fftw_double", "extractor_type": "cmake", "context": "  set(fftw_double_version ${fftw3_version})", "confidence": "Low"}, {"depname": "fftw_double", "version": null, "version_op": null, "unified_name": "fftw_double", "extractor_type": "cmake", "context": "      set(fftw_double_version ${pc_fftw_version})", "confidence": "Low"}, {"depname": "fftw", "version": null, "version_op": null, "unified_name": "fftw", "extractor_type": "cmake", "context": "  set(fftw_version ${pc_fftwf_version})", "confidence": "Low"}, {"depname": "fftw", "version": null, "version_op": null, "unified_name": "fftw", "extractor_type": "cmake", "context": "      set(fftw_version ${pc_fftw_version})", "confidence": "Low"}, {"depname": "fftw", "version": null, "version_op": null, "unified_name": "fftw", "extractor_type": "cmake", "context": "    set(fftw_version ${pc_fftw_version})", "confidence": "Low"}, {"depname": "fftw3f", "version": "${fftw_find_version}", "version_op": ">=", "unified_name": "fftw3f", "extractor_type": "cmake::pkg", "context": "pkg_check_modules(pc_fftwf required\n      imported_target global\n      fftw3f>=${fftw_find_version})", "confidence": "High"}, {"depname": "fftwf", "version": "${fftw_find_version}", "version_op": ">=", "unified_name": "fftwf", "extractor_type": "cmake::pkg", "context": "pkg_check_modules(pc_fftwf required\n        imported_target global\n        fftwf>=${fftw_find_version})", "confidence": "High"}, {"depname": "fftw3", "version": "${fftw_find_version}", "version_op": ">=", "unified_name": "fftw3", "extractor_type": "cmake::pkg", "context": "pkg_check_modules(pc_fftw required\n      imported_target global\n      fftw3>=${fftw_find_version})", "confidence": "High"}, {"depname": "fftw", "version": "${fftw_find_version}", "version_op": ">=", "unified_name": "fftw", "extractor_type": "cmake::pkg", "context": "pkg_check_modules(pc_fftw required\n        imported_target global\n        fftw>=${fftw_find_version})", "confidence": "High"}], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [{"depname": "zstr", "version": null, "version_op": null, "unified_name": "zstr", "extractor_type": "cmake", "context": "LLNL@@lbann/cmake/modules/FindZSTR.cmake", "confidence": "High"}], "type": "cmake", "libs": []}, {"deps": [{"depname": "mpi", "version": null, "version_op": null, "unified_name": "mpi", "extractor_type": "cmake", "context": "find_package(mpi required components cxx)", "confidence": "High"}], "type": "cmake", "libs": []}, {"deps": [{"depname": "cxx", "version": null, "version_op": null, "unified_name": "cxx", "extractor_type": "cmake", "context": "  set(cxx_version \"${cmake_cxx_compiler_version}\")", "confidence": "Low"}], "type": "cmake", "libs": []}, {"deps": [{"depname": "roctracer", "version": null, "version_op": null, "unified_name": "roctracer", "extractor_type": "cmake", "context": "LLNL@@lbann/cmake/modules/FindRoctracer.cmake", "confidence": "High"}], "type": "cmake", "libs": [{"filenames": ["${comp}64"], "version": "", "fromfile": "LLNL@@lbann/cmake/modules/FindRoctracer.cmake", "content": "find_library(${comp}_library ${comp}64\n    hints ${rocm_path}/roctracer $env{rocm_path}/roctracer\n    hints ${rocm_path} $env{rocm_path}\n    path_suffixes lib64 lib\n    doc \"the ${comp} library for roctracer.\"\n    no_default_path)"}, {"filenames": ["${comp}64"], "version": "", "fromfile": "LLNL@@lbann/cmake/modules/FindRoctracer.cmake", "content": "find_library(${comp}_library ${comp}64)"}]}, {"deps": [{"depname": "nvtx", "version": null, "version_op": null, "unified_name": "nvtx", "extractor_type": "cmake", "context": "LLNL@@lbann/cmake/modules/FindNVTX.cmake", "confidence": "High"}], "type": "cmake", "libs": [{"filenames": ["nvtoolsext"], "version": "", "fromfile": "LLNL@@lbann/cmake/modules/FindNVTX.cmake", "content": "find_library(nvtx_library nvtoolsext\n  hints ${nvtx_dir} $env{nvtx_dir} ${cuda_toolkit_root_dir} ${cuda_sdk_root_dir}\n  path_suffixes lib64\n  doc \"the nvtx library.\"\n  no_default_path)"}, {"filenames": ["nvtoolsext"], "version": "", "fromfile": "LLNL@@lbann/cmake/modules/FindNVTX.cmake", "content": "find_library(nvtx_library nvtoolsext)"}]}, {"deps": [{"depname": "nvshmem", "version": null, "version_op": null, "unified_name": "nvshmem", "extractor_type": "cmake", "context": "LLNL@@lbann/cmake/modules/FindNVSHMEM.cmake", "confidence": "High"}], "type": "cmake", "libs": [{"filenames": ["nvshmem"], "version": "", "fromfile": "LLNL@@lbann/cmake/modules/FindNVSHMEM.cmake", "content": "find_library(nvshmem_library nvshmem\n  hints ${nvshmem_dir} $env{nvshmem_dir}\n  path_suffixes lib lib64\n  no_default_path\n  doc \"the location of nvshmem library.\")"}, {"filenames": ["nvshmem"], "version": "", "fromfile": "LLNL@@lbann/cmake/modules/FindNVSHMEM.cmake", "content": "find_library(nvshmem_library nvshmem)"}]}, {"deps": [{"depname": "vtune", "version": null, "version_op": null, "unified_name": "vtune", "extractor_type": "cmake", "context": "LLNL@@lbann/cmake/modules/FindVTune.cmake", "confidence": "High"}], "type": "cmake", "libs": [{"filenames": ["libittnotify.a"], "version": "", "fromfile": "LLNL@@lbann/cmake/modules/FindVTune.cmake", "content": "find_library(vtune_static_lib libittnotify.a\n  hints ${vtune_dir} $env{vtune_dir}\n  path_suffixes lib64 lib\n  no_default_path\n  doc \"the location of vtune static library.\")"}, {"filenames": ["libittnotify.a"], "version": "", "fromfile": "LLNL@@lbann/cmake/modules/FindVTune.cmake", "content": "find_library(vtune_static_lib libittnotify.a)"}]}, {"deps": [{"depname": "protobuf", "version": "3.0.0", "version_op": null, "unified_name": "protobuf", "extractor_type": "cmake", "context": "find_package(protobuf \"3.0.0\" module)", "confidence": "High"}, {"depname": "protobuf", "version": "3.0.0", "version_op": null, "unified_name": "protobuf", "extractor_type": "cmake", "context": "find_package(protobuf \"3.0.0\" config quiet\n    names protobuf protobuf\n    hints\n    \"${protobuf_dir}\" \"${protobuf_dir}\"\n    \"$env{protobuf_dir}\" \"$env{protobuf_dir}\"\n    path_suffixes lib64/cmake/protobuf lib/cmake/protobuf\n    no_default_path)", "confidence": "High"}, {"depname": "protobuf", "version": "3.0.0", "version_op": null, "unified_name": "protobuf", "extractor_type": "cmake", "context": "find_package(protobuf \"3.0.0\" config quiet required)", "confidence": "High"}, {"depname": "protobuf_min", "version": "3.0.0", "version_op": null, "unified_name": "protobuf", "extractor_type": "cmake", "context": "\nset(protobuf_min_version \"3.0.0\")", "confidence": "Low"}], "type": "cmake", "libs": []}, {"deps": [{"depname": "cutt", "version": null, "version_op": null, "unified_name": "cutt", "extractor_type": "cmake", "context": "LLNL@@lbann/cmake/modules/FindcuTT.cmake", "confidence": "High"}], "type": "cmake", "libs": [{"filenames": ["cutt"], "version": "", "fromfile": "LLNL@@lbann/cmake/modules/FindcuTT.cmake", "content": "find_library(cutt_library cutt)"}]}, {"deps": [{"depname": "cutensor", "version": null, "version_op": null, "unified_name": "cutensor", "extractor_type": "cmake", "context": "LLNL@@lbann/cmake/modules/FindcuTENSOR.cmake", "confidence": "High"}, {"depname": "cudatoolkit", "version": "11.0.0", "version_op": null, "unified_name": "cudatoolkit", "extractor_type": "cmake", "context": "find_package(cudatoolkit 11.0.0 required)", "confidence": "High"}], "type": "cmake", "libs": [{"filenames": ["cutensor"], "version": "", "fromfile": "LLNL@@lbann/cmake/modules/FindcuTENSOR.cmake", "content": "find_library(cutensor_library cutensor\n  hints ${cutensor_dir} $env{cutensor_dir}\n  ${cuda_toolkit_root_dir} $env{cuda_toolkit_root_dir}\n  ${cuda_sdk_root_dir}\n  path_suffixes\n  lib64/${cudatoolkit_version_major}.${cudatoolkit_version_minor}\n  lib64/${cudatoolkit_version_major}\n  lib/${cudatoolkit_version_major}.${cudatoolkit_version_minor}\n  lib/${cudatoolkit_version_major}\n  lib64\n  lib\n  no_default_path\n  doc \"the cutensor library.\")"}, {"filenames": ["cutensor"], "version": "", "fromfile": "LLNL@@lbann/cmake/modules/FindcuTENSOR.cmake", "content": "find_library(cutensor_library cutensor\n  path_suffixes\n  lib64/${cudatoolkit_version_major}.${cudatoolkit_version_minor}\n  lib64/${cudatoolkit_version_major}\n  lib/${cudatoolkit_version_major}.${cudatoolkit_version_minor}\n  lib/${cudatoolkit_version_major}\n  lib64\n  lib)"}]}, {"deps": [{"depname": "breathe", "version": null, "version_op": null, "unified_name": "breathe", "extractor_type": "cmake", "context": "LLNL@@lbann/cmake/modules/FindBreathe.cmake", "confidence": "High"}], "type": "cmake", "libs": [{"filenames": ["breathe-apidoc"], "version": "", "fromfile": "LLNL@@lbann/cmake/modules/FindBreathe.cmake", "content": "find_program(breathe_executable breathe-apidoc\n  hints ${breathe_dir} $env{breathe_dir}\n  ${sphinx_dir} $env{sphinx_dir}\n  path_suffixes bin\n  doc \"the breathe documentation tool.\"\n  no_default_path)"}, {"filenames": ["breathe-apidoc"], "version": "", "fromfile": "LLNL@@lbann/cmake/modules/FindBreathe.cmake", "content": "find_program(breathe_executable breathe-apidoc)"}]}, {"deps": [{"depname": "cnpy", "version": null, "version_op": null, "unified_name": "cnpy", "extractor_type": "cmake", "context": "LLNL@@lbann/cmake/modules/FindCNPY.cmake", "confidence": "High"}], "type": "cmake", "libs": [{"filenames": ["cnpy"], "version": "", "fromfile": "LLNL@@lbann/cmake/modules/FindCNPY.cmake", "content": "find_library(cnpy_library cnpy\n  hints ${cnpy_dir} $env{cnpy_dir}\n  path_suffixes lib64 lib\n  no_default_path\n  doc \"the cnpy library.\")"}, {"filenames": ["cnpy"], "version": "", "fromfile": "LLNL@@lbann/cmake/modules/FindCNPY.cmake", "content": "find_library(cnpy_library cnpy)"}]}, {"deps": [{"depname": "sphinx", "version": null, "version_op": null, "unified_name": "sphinx", "extractor_type": "cmake", "context": "LLNL@@lbann/cmake/modules/FindSphinx.cmake", "confidence": "High"}], "type": "cmake", "libs": [{"filenames": ["sphinx-build"], "version": "", "fromfile": "LLNL@@lbann/cmake/modules/FindSphinx.cmake", "content": "find_program(sphinx_executable sphinx-build\n  hints ${sphinx_dir} $env{sphinx_dir}\n  path_suffixes bin\n  doc \"the sphinx-build documentation tool.\"\n  no_default_path)"}, {"filenames": ["sphinx-build"], "version": "", "fromfile": "LLNL@@lbann/cmake/modules/FindSphinx.cmake", "content": "find_program(sphinx_executable sphinx-build)"}]}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "make"}, {"deps": [{"depname": "sphinx", "version": null, "version_op": null, "unified_name": "sphinx", "extractor_type": "cmake", "context": "find_package(sphinx)", "confidence": "High"}, {"depname": "breathe", "version": null, "version_op": null, "unified_name": "breathe", "extractor_type": "cmake", "context": "find_package(breathe)", "confidence": "High"}], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [{"depname": "opencv", "version": null, "version_op": null, "unified_name": "opencv", "extractor_type": "cmake", "context": "find_package(opencv quiet hints ${lbann_build_dir})", "confidence": "High"}, {"depname": "mpi", "version": null, "version_op": null, "unified_name": "mpi", "extractor_type": "cmake", "context": "find_package(mpi required)", "confidence": "High"}, {"depname": "compute_mean", "version": null, "version_op": null, "unified_name": "compute_mean", "extractor_type": "cmake", "context": "project(compute_mean)", "confidence": ""}], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [{"depname": "lbann", "version": "0.102.0", "version_op": null, "unified_name": "lbann", "extractor_type": "cmake", "context": "find_package(lbann 0.102.0 required)", "confidence": "High"}, {"depname": "my_lbann_test", "version": null, "version_op": null, "unified_name": "my_lbann_test", "extractor_type": "cmake", "context": "project(my_lbann_test c cxx)", "confidence": ""}], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}]}