{"target": "CasparCG@@server", "extractors": [{"deps": [], "type": "cmake", "libs": []}, {"deps": [{"depname": "ffmpeg", "version": null, "version_op": null, "unified_name": "ffmpeg", "extractor_type": "cmake", "context": "CasparCG@@server/src/CMakeModules/FindFFmpeg.cmake", "confidence": "High"}, {"depname": "pkgconfig", "version": null, "version_op": null, "unified_name": "pkgconfig", "extractor_type": "cmake", "context": "find_package(pkgconfig)", "confidence": "High"}, {"depname": "${_pkgconfig}", "version": null, "version_op": null, "unified_name": "${_pkgconfig}", "extractor_type": "cmake::pkg", "context": "pkg_check_modules(${_component} ${_pkgconfig})", "confidence": "High"}], "type": "cmake", "libs": [{"filenames": ["${_library}"], "version": "", "fromfile": "CasparCG@@server/src/CMakeModules/FindFFmpeg.cmake", "content": "find_library(${_component}_libraries names ${_library}\n      hints\n      ${pc_lib${_component}_libdir}\n      ${pc_lib${_component}_library_dirs}\n  )"}]}, {"deps": [{"depname": "sfml", "version": null, "version_op": null, "unified_name": "sfml", "extractor_type": "cmake", "context": "CasparCG@@server/src/CMakeModules/FindSFML.cmake", "confidence": "High"}], "type": "cmake", "libs": [{"filenames": ["sfml-${find_sfml_component_lower}"], "version": "", "fromfile": "CasparCG@@server/src/CMakeModules/FindSFML.cmake", "content": "find_library(sfml_${find_sfml_component_upper}_library_release\n                     names sfml-${find_sfml_component_lower}\n                     path_suffixes lib64 lib\n                     paths ${find_sfml_paths})"}, {"filenames": ["sfml-${find_sfml_component_lower}-d"], "version": "", "fromfile": "CasparCG@@server/src/CMakeModules/FindSFML.cmake", "content": "find_library(sfml_${find_sfml_component_upper}_library_debug\n                     names sfml-${find_sfml_component_lower}-d\n                     path_suffixes lib64 lib\n                     paths ${find_sfml_paths})"}, {"filenames": ["sfml-${find_sfml_component_lower}-s"], "version": "", "fromfile": "CasparCG@@server/src/CMakeModules/FindSFML.cmake", "content": "find_library(sfml_${find_sfml_component_upper}_library_static_release\n                     names sfml-${find_sfml_component_lower}-s\n                     path_suffixes lib64 lib\n                     paths ${find_sfml_paths})"}, {"filenames": ["sfml-${find_sfml_component_lower}-s-d"], "version": "", "fromfile": "CasparCG@@server/src/CMakeModules/FindSFML.cmake", "content": "find_library(sfml_${find_sfml_component_upper}_library_static_debug\n                     names sfml-${find_sfml_component_lower}-s-d\n                     path_suffixes lib64 lib\n                     paths ${find_sfml_paths})"}, {"filenames": ["sfml-${find_sfml_component_lower}"], "version": "", "fromfile": "CasparCG@@server/src/CMakeModules/FindSFML.cmake", "content": "find_library(sfml_${find_sfml_component_upper}_library_dynamic_release\n                     names sfml-${find_sfml_component_lower}\n                     path_suffixes lib64 lib\n                     paths ${find_sfml_paths})"}, {"filenames": ["sfml-${find_sfml_component_lower}-d"], "version": "", "fromfile": "CasparCG@@server/src/CMakeModules/FindSFML.cmake", "content": "find_library(sfml_${find_sfml_component_upper}_library_dynamic_debug\n                     names sfml-${find_sfml_component_lower}-d\n                     path_suffixes lib64 lib\n                     paths ${find_sfml_paths})"}, {"filenames": ["${argn}"], "version": "", "fromfile": "CasparCG@@server/src/CMakeModules/FindSFML.cmake", "content": "find_library(${output} names ${argn} paths ${find_sfml_paths} path_suffixes lib no_system_environment_path)"}]}, {"deps": [{"depname": "freeimage", "version": null, "version_op": null, "unified_name": "freeimage", "extractor_type": "cmake", "context": "CasparCG@@server/src/CMakeModules/FindFreeImage.cmake", "confidence": "High"}], "type": "cmake", "libs": [{"filenames": ["freeimage"], "version": "", "fromfile": "CasparCG@@server/src/CMakeModules/FindFreeImage.cmake", "content": "find_library(freeimage_libraries freeimage paths ${freeimage_library_search_dirs})"}]}, {"deps": [{"depname": "boost", "version": null, "version_op": null, "unified_name": "boost", "extractor_type": "cmake", "context": "CasparCG@@server/src/CMakeModules/FindBoost.cmake", "confidence": "High"}, {"depname": "boost", "version": null, "version_op": null, "unified_name": "boost", "extractor_type": "cmake", "context": "find_package(boost quiet no_module)", "confidence": "High"}, {"depname": "threads", "version": null, "version_op": null, "unified_name": "threads", "extractor_type": "cmake", "context": "find_package(threads )", "confidence": "High"}, {"depname": "component_python", "version": "2", "version_op": null, "unified_name": "component_python", "extractor_type": "cmake", "context": "    set(component_python_version \"${cmake_match_2}\")", "confidence": "Low"}, {"depname": "component_python", "version": "2", "version_op": null, "unified_name": "component_python", "extractor_type": "cmake", "context": "    set(component_python_version \"${cmake_match_2}\")", "confidence": "Low"}, {"depname": "boost_boostified", "version": null, "version_op": null, "unified_name": "boost_boostified", "extractor_type": "cmake", "context": "        set(_boost_boostified_version\n          \"${cmake_match_1}_${cmake_match_2}_${cmake_match_3}\")", "confidence": "Low"}, {"depname": "boost_boostified", "version": null, "version_op": null, "unified_name": "boost_boostified", "extractor_type": "cmake", "context": "        set(_boost_boostified_version\n          \"${cmake_match_1}_${cmake_match_2}\")", "confidence": "Low"}, {"depname": "boost", "version": "0", "version_op": null, "unified_name": "boost", "extractor_type": "cmake", "context": "  set(boost_version 0)", "confidence": "Low"}, {"depname": "libboost_", "version": null, "version_op": null, "unified_name": "boost_", "extractor_type": "cmake", "context": "  set(boost_lib_version \"\")", "confidence": "Low"}, {"depname": "boost", "version": null, "version_op": null, "unified_name": "boost", "extractor_type": "cmake", "context": "    set(_boost_version \"${boost_major_version}.${boost_minor_version}.${boost_subminor_version}\")", "confidence": "Low"}], "type": "cmake", "libs": [{"filenames": ["${argn}"], "version": "", "fromfile": "CasparCG@@server/src/CMakeModules/FindBoost.cmake", "content": "find_library(${var} ${argn})"}, {"filenames": ["release"], "version": "", "fromfile": "CasparCG@@server/src/CMakeModules/FindBoost.cmake", "content": "find_library(boost_${uppercomponent}_library_release release\n      names ${_boost_release_names}\n      hints ${_boost_library_search_dirs_tmp}\n      names_per_dir\n      doc \"${_boost_docstring_release}\"\n      )"}, {"filenames": ["debug"], "version": "", "fromfile": "CasparCG@@server/src/CMakeModules/FindBoost.cmake", "content": "find_library(boost_${uppercomponent}_library_debug debug\n      names ${_boost_debug_names}\n      hints ${_boost_library_search_dirs_tmp}\n      names_per_dir\n      doc \"${_boost_docstring_debug}\"\n      )"}]}, {"deps": [{"depname": "git", "version": null, "version_op": null, "unified_name": "git", "extractor_type": "cmake", "context": "find_package(git)", "confidence": "High"}], "type": "cmake", "libs": []}, {"deps": [{"depname": "git", "version": null, "version_op": null, "unified_name": "git", "extractor_type": "cmake", "context": "find_package (git)", "confidence": "High"}, {"depname": "boost", "version": "1.67.0", "version_op": null, "unified_name": "boost", "extractor_type": "cmake", "context": "find_package (boost 1.67.0 components system thread chrono filesystem log locale regex date_time coroutine required)", "confidence": "High"}, {"depname": "ffmpeg", "version": null, "version_op": null, "unified_name": "ffmpeg", "extractor_type": "cmake", "context": "find_package (ffmpeg required)", "confidence": "High"}, {"depname": "opengl", "version": null, "version_op": null, "unified_name": "opengl", "extractor_type": "cmake", "context": "find_package (opengl required)", "confidence": "High"}, {"depname": "freeimage", "version": null, "version_op": null, "unified_name": "freeimage", "extractor_type": "cmake", "context": "find_package (freeimage required)", "confidence": "High"}, {"depname": "glew", "version": null, "version_op": null, "unified_name": "glew", "extractor_type": "cmake", "context": "find_package (glew required)", "confidence": "High"}, {"depname": "tbb", "version": null, "version_op": null, "unified_name": "tbb", "extractor_type": "cmake", "context": "find_package (tbb required)", "confidence": "High"}, {"depname": "openal", "version": null, "version_op": null, "unified_name": "openal", "extractor_type": "cmake", "context": "find_package (openal required)", "confidence": "High"}, {"depname": "sfml", "version": "2", "version_op": null, "unified_name": "sfml", "extractor_type": "cmake", "context": "find_package (sfml 2 components graphics window system required)", "confidence": "High"}, {"depname": "x11", "version": null, "version_op": null, "unified_name": "x11", "extractor_type": "cmake", "context": "find_package (x11 required)", "confidence": "High"}, {"depname": "cef", "version": null, "version_op": null, "unified_name": "cef", "extractor_type": "cmake", "context": "find_package (cef required)", "confidence": "High"}], "type": "cmake", "libs": []}, {"deps": [{"depname": "tbb", "version": null, "version_op": null, "unified_name": "tbb", "extractor_type": "cmake", "context": "CasparCG@@server/src/CMakeModules/FindTBB.cmake", "confidence": "High"}], "type": "cmake", "libs": [{"filenames": ["tbb"], "version": "", "fromfile": "CasparCG@@server/src/CMakeModules/FindTBB.cmake", "content": "find_library(tbb_library_release\n             names tbb\n             paths )"}, {"filenames": ["${tbb_library_names_debug}"], "version": "", "fromfile": "CasparCG@@server/src/CMakeModules/FindTBB.cmake", "content": "find_library(tbb_library_debug\n             names ${tbb_library_names_debug}\n             paths )"}, {"filenames": ["tbbmalloc"], "version": "", "fromfile": "CasparCG@@server/src/CMakeModules/FindTBB.cmake", "content": "find_library(tbb_malloc_library_release\n             names tbbmalloc\n             paths )"}, {"filenames": ["${tbb_malloc_library_names_debug}"], "version": "", "fromfile": "CasparCG@@server/src/CMakeModules/FindTBB.cmake", "content": "find_library(tbb_malloc_library_debug\n             names ${tbb_malloc_library_names_debug}\n             paths )"}, {"filenames": ["tbbmalloc_proxy"], "version": "", "fromfile": "CasparCG@@server/src/CMakeModules/FindTBB.cmake", "content": "find_library(tbb_malloc_proxy_library_release\n             names tbbmalloc_proxy\n             paths )"}, {"filenames": ["${tbb_malloc_proxy_library_names_debug}"], "version": "", "fromfile": "CasparCG@@server/src/CMakeModules/FindTBB.cmake", "content": "find_library(tbb_malloc_proxy_library_debug\n             names ${tbb_malloc_proxy_library_names_debug}\n             paths )"}]}, {"deps": [], "type": "cmake", "libs": [{"filenames": ["lsb_release"], "version": "", "fromfile": "CasparCG@@server/src/CMakeModules/PlatformIntrospection.cmake", "content": "find_program(lsb_release lsb_release)"}]}, {"deps": [{"depname": "cef", "version": null, "version_op": null, "unified_name": "cef", "extractor_type": "cmake", "context": "CasparCG@@server/src/CMakeModules/FindCEF.cmake", "confidence": "High"}], "type": "cmake", "libs": [{"filenames": ["cef", "libcef", "cef.lib", "libcef.o", "\"chromium embedded framework\""], "version": "", "fromfile": "CasparCG@@server/src/CMakeModules/FindCEF.cmake", "content": "find_library(cef_library\n\t\tnames cef libcef cef.lib libcef.o \"chromium embedded framework\"\n\t\tno_default_path\n\t\tpaths ${cef_root_dir} ${cef_root_dir}/release)"}, {"filenames": ["cef_dll_wrapper", "libcef_dll_wrapper"], "version": "", "fromfile": "CasparCG@@server/src/CMakeModules/FindCEF.cmake", "content": "find_library(cefwrapper_library\n\t\tnames cef_dll_wrapper libcef_dll_wrapper\n\t\tno_default_path\n\t\tpaths ${cef_root_dir}/build/libcef_dll/release\n\t\t\t${cef_root_dir}/build/libcef_dll_wrapper/release\n\t\t\t${cef_root_dir}/build/libcef_dll\n\t\t\t${cef_root_dir}/build/libcef_dll_wrapper)"}, {"filenames": ["cef", "libcef", "cef.lib", "libcef.o", "\"chromium embedded framework\""], "version": "", "fromfile": "CasparCG@@server/src/CMakeModules/FindCEF.cmake", "content": "find_library(cef_library\n\t\tnames cef libcef cef.lib libcef.o \"chromium embedded framework\"\n\t\tpaths ${cef_root_dir} ${cef_root_dir}/release)"}, {"filenames": ["cef_dll_wrapper", "libcef_dll_wrapper"], "version": "", "fromfile": "CasparCG@@server/src/CMakeModules/FindCEF.cmake", "content": "find_library(cefwrapper_library\n\t\tnames cef_dll_wrapper libcef_dll_wrapper\n\t\tpaths ${cef_root_dir}/build/libcef_dll/release\n\t\t\t${cef_root_dir}/build/libcef_dll_wrapper/release\n\t\t\t${cef_root_dir}/build/libcef_dll\n\t\t\t${cef_root_dir}/build/libcef_dll_wrapper\n\t\t\t${cef_root_dir}/release)"}, {"filenames": ["cef_dll_wrapper", "libcef_dll_wrapper"], "version": "", "fromfile": "CasparCG@@server/src/CMakeModules/FindCEF.cmake", "content": "find_library(cefwrapper_library_debug\n\t\t\tnames cef_dll_wrapper libcef_dll_wrapper\n\t\t\tpaths ${cef_root_dir}/build/libcef_dll/debug ${cef_root_dir}/build/libcef_dll_wrapper/debug)"}]}, {"deps": [{"depname": "shell", "version": null, "version_op": null, "unified_name": "shell", "extractor_type": "cmake", "context": "project (shell)", "confidence": ""}], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [{"depname": "common", "version": null, "version_op": null, "unified_name": "common", "extractor_type": "cmake", "context": "project (common)", "confidence": ""}], "type": "cmake", "libs": []}, {"deps": [{"depname": "protocol", "version": null, "version_op": null, "unified_name": "protocol", "extractor_type": "cmake", "context": "project (protocol)", "confidence": ""}], "type": "cmake", "libs": []}, {"deps": [{"depname": "accelerator", "version": null, "version_op": null, "unified_name": "accelerator", "extractor_type": "cmake", "context": "project (accelerator)", "confidence": ""}], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [{"depname": "screen", "version": null, "version_op": null, "unified_name": "screen", "extractor_type": "cmake", "context": "project (screen)", "confidence": ""}], "type": "cmake", "libs": []}, {"deps": [{"depname": "decklink", "version": null, "version_op": null, "unified_name": "decklink", "extractor_type": "cmake", "context": "project (decklink)", "confidence": ""}], "type": "cmake", "libs": []}, {"deps": [{"depname": "flash", "version": null, "version_op": null, "unified_name": "flash", "extractor_type": "cmake", "context": "project (flash)", "confidence": ""}], "type": "cmake", "libs": []}, {"deps": [{"depname": "html", "version": null, "version_op": null, "unified_name": "html", "extractor_type": "cmake", "context": "project (html)", "confidence": ""}], "type": "cmake", "libs": []}, {"deps": [{"depname": "oal", "version": null, "version_op": null, "unified_name": "oal", "extractor_type": "cmake", "context": "project (oal)", "confidence": ""}], "type": "cmake", "libs": []}, {"deps": [{"depname": "ffmpeg", "version": null, "version_op": null, "unified_name": "ffmpeg", "extractor_type": "cmake", "context": "project (ffmpeg)", "confidence": ""}], "type": "cmake", "libs": []}, {"deps": [{"depname": "bluefish", "version": null, "version_op": null, "unified_name": "bluefish", "extractor_type": "cmake", "context": "project (bluefish)", "confidence": ""}], "type": "cmake", "libs": []}, {"deps": [{"depname": "image", "version": null, "version_op": null, "unified_name": "image", "extractor_type": "cmake", "context": "project (image)", "confidence": ""}], "type": "cmake", "libs": []}, {"deps": [{"depname": "newtek", "version": null, "version_op": null, "unified_name": "newtek", "extractor_type": "cmake", "context": "project (newtek)", "confidence": ""}], "type": "cmake", "libs": []}, {"deps": [{"depname": "core", "version": null, "version_op": null, "unified_name": "core", "extractor_type": "cmake", "context": "project (core)", "confidence": ""}], "type": "cmake", "libs": []}]}