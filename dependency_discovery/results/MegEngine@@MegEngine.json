{"target": "MegEngine@@MegEngine", "extractors": [{"deps": [{"depname": "cuda", "version": null, "version_op": null, "unified_name": "cuda", "extractor_type": "cmake", "context": "find_package(cuda)", "confidence": "High"}, {"depname": "pythoninterp", "version": "3", "version_op": null, "unified_name": "pythoninterp", "extractor_type": "cmake", "context": "find_package(pythoninterp 3 required)", "confidence": "High"}, {"depname": "threads", "version": null, "version_op": null, "unified_name": "threads", "extractor_type": "cmake", "context": "find_package(threads)", "confidence": "High"}, {"depname": "megengine", "version": "${mgb_ver_string}", "version_op": null, "unified_name": "megengine", "extractor_type": "cmake", "context": "project(   megengine   languages c cxx   version ${mgb_ver_string})", "confidence": "High"}], "type": "cmake", "libs": [{"filenames": ["lapack_static"], "version": "", "fromfile": "MegEngine@@MegEngine/CMakeLists.txt", "content": "find_library(lapack_static_path lapack_static\n                   hints ${cmake_cuda_host_implicit_link_directories})"}, {"filenames": ["python3"], "version": "", "fromfile": "MegEngine@@MegEngine/CMakeLists.txt", "content": "find_program(python3_executable_without_version python3)"}, {"filenames": ["ccache"], "version": "", "fromfile": "MegEngine@@MegEngine/CMakeLists.txt", "content": "find_program(ccache_bin ccache)"}]}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [{"depname": "lite_static_test", "version": null, "version_op": null, "unified_name": "lite_static_test", "extractor_type": "bazel", "context": "MegEngine@@MegEngine/lite/load_and_run/BUILD:\"//brain/megbrain/lite:lite_static_test\"", "confidence": "High"}], "type": "bazel"}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [{"depname": "dnnl", "version": null, "version_op": null, "unified_name": "dnnl", "extractor_type": "cmake", "context": "find_package(dnnl)", "confidence": "High"}], "type": "cmake", "libs": []}, {"deps": [{"depname": "protobuf", "version": null, "version_op": null, "unified_name": "protobuf", "extractor_type": "cmake", "context": "find_package(protobuf)", "confidence": "High"}], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": [{"filenames": ["libmkl_core.a", "mkl_core.lib"], "version": "", "fromfile": "MegEngine@@MegEngine/cmake/mkl.cmake", "content": "find_library(\n    mkl_core_library\n    names libmkl_core.a mkl_core.lib\n    paths ${mkl_root_dir}/lib/${mkl_arch_dir} ${mkl_root_dir}/lib/)"}, {"filenames": ["libmkl_sequential.a", "mkl_sequential.lib"], "version": "", "fromfile": "MegEngine@@MegEngine/cmake/mkl.cmake", "content": "find_library(\n    mkl_sequential_library\n    names libmkl_sequential.a mkl_sequential.lib\n    paths ${mkl_root_dir}/lib/${mkl_arch_dir} ${mkl_root_dir}/lib/)"}, {"filenames": ["libmkl_intel_ilp64.a", "mkl_intel_ilp64.lib"], "version": "", "fromfile": "MegEngine@@MegEngine/cmake/mkl.cmake", "content": "find_library(\n      mkl_ipl_library\n      names libmkl_intel_ilp64.a mkl_intel_ilp64.lib\n      paths ${mkl_root_dir}/lib/${mkl_arch_dir} ${mkl_root_dir}/lib/)"}, {"filenames": ["libmkl_intel_32.a", "mkl_intel_32.lib", "mkl_intel_c.lib"], "version": "", "fromfile": "MegEngine@@MegEngine/cmake/mkl.cmake", "content": "find_library(\n      mkl_ipl_library\n      names libmkl_intel_32.a mkl_intel_32.lib mkl_intel_c.lib\n      paths ${mkl_root_dir}/lib/${mkl_arch_dir} ${mkl_root_dir}/lib/)"}, {"filenames": ["libmkl_core.so", "libmkl_core.dylib"], "version": "", "fromfile": "MegEngine@@MegEngine/cmake/mkl.cmake", "content": "find_library(\n    mkl_core_library\n    names libmkl_core.so libmkl_core.dylib\n    paths ${mkl_root_dir}/lib/${mkl_arch_dir} ${mkl_root_dir}/lib/)"}, {"filenames": ["libmkl_sequential.so", "libmkl_sequential.dylib"], "version": "", "fromfile": "MegEngine@@MegEngine/cmake/mkl.cmake", "content": "find_library(\n    mkl_sequential_library\n    names libmkl_sequential.so libmkl_sequential.dylib\n    paths ${mkl_root_dir}/lib/${mkl_arch_dir} ${mkl_root_dir}/lib/)"}, {"filenames": ["libmkl_intel_ilp64.so", "libmkl_intel_ilp64.dylib"], "version": "", "fromfile": "MegEngine@@MegEngine/cmake/mkl.cmake", "content": "find_library(\n      mkl_ipl_library\n      names libmkl_intel_ilp64.so libmkl_intel_ilp64.dylib\n      paths ${mkl_root_dir}/lib/${mkl_arch_dir} ${mkl_root_dir}/lib/)"}, {"filenames": ["libmkl_intel_32.so", "libmkl_intel_32.dylib"], "version": "", "fromfile": "MegEngine@@MegEngine/cmake/mkl.cmake", "content": "find_library(\n      mkl_ipl_library\n      names libmkl_intel_32.so libmkl_intel_32.dylib\n      paths ${mkl_root_dir}/lib/${mkl_arch_dir} ${mkl_root_dir}/lib/)"}]}, {"deps": [{"depname": "llvm", "version": "6.0", "version_op": null, "unified_name": "llvm", "extractor_type": "cmake", "context": "find_package(llvm 6.0 required config)", "confidence": "High"}], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": [{"filenames": ["libnvinfer_static.a", "nvinfer.lib"], "version": "", "fromfile": "MegEngine@@MegEngine/cmake/tensorrt.cmake", "content": "find_library(\n    trt_library\n    names libnvinfer_static.a nvinfer.lib\n    paths ${alter_ld_library_paths} ${trt_root_dir} ${cmake_install_prefix}\n    hints ${alter_library_paths}\n    path_suffixes lib lib64\n    doc \"trt library.\")"}, {"filenames": ["libnvinfer_plugin_static.a", "nvinfer_plugin.lib"], "version": "", "fromfile": "MegEngine@@MegEngine/cmake/tensorrt.cmake", "content": "find_library(\n    trt_plugin_library\n    names libnvinfer_plugin_static.a nvinfer_plugin.lib\n    paths ${alter_ld_library_paths} ${trt_root_dir} ${cmake_install_prefix}\n    hints ${alter_library_paths}\n    path_suffixes lib lib64\n    doc \"trt plugin library.\")"}, {"filenames": ["libnvinfer.so", "libnvinfer.dylib", "nvinfer.dll", "nvinfer"], "version": "", "fromfile": "MegEngine@@MegEngine/cmake/tensorrt.cmake", "content": "find_library(\n    trt_library\n    names libnvinfer.so libnvinfer.dylib nvinfer.dll nvinfer\n    paths ${alter_ld_library_paths} ${trt_root_dir} ${cmake_install_prefix}\n    hints ${alter_library_paths}\n    path_suffixes lib lib64\n    doc \"trt library.\")"}, {"filenames": ["libnvinfer_plugin.so", "libnvinfer_plugin.dylib", "nvinfer_plugin.dll", "nvinfer_plugin"], "version": "", "fromfile": "MegEngine@@MegEngine/cmake/tensorrt.cmake", "content": "find_library(\n    trt_plugin_library\n    names libnvinfer_plugin.so libnvinfer_plugin.dylib nvinfer_plugin.dll nvinfer_plugin\n    paths ${alter_ld_library_paths} ${trt_root_dir} ${cmake_install_prefix}\n    hints ${alter_library_paths}\n    path_suffixes lib lib64\n    doc \"trt plugin library.\")"}, {"filenames": ["libnvinfer.so", "nvinfer"], "version": "", "fromfile": "MegEngine@@MegEngine/cmake/tensorrt.cmake", "content": "find_library(\n    trt_library\n    names libnvinfer.so nvinfer\n    paths ${alter_ld_library_paths} ${trt_root_dir} ${cmake_install_prefix}\n    hints ${alter_library_paths}\n    path_suffixes lib lib64\n    doc \"trt library.\")"}, {"filenames": ["libnvinfer_plugin.so", "nvinfer_plugin"], "version": "", "fromfile": "MegEngine@@MegEngine/cmake/tensorrt.cmake", "content": "find_library(\n    trt_plugin_library\n    names libnvinfer_plugin.so nvinfer_plugin\n    paths ${alter_ld_library_paths} ${trt_root_dir} ${cmake_install_prefix}\n    hints ${alter_library_paths}\n    path_suffixes lib lib64\n    doc \"trt plugin library.\")"}, {"filenames": ["libmyelin_compiler_static.a", "myelin_compiler_static.lib", "myelin64_1.lib", "myelin64_1"], "version": "", "fromfile": "MegEngine@@MegEngine/cmake/tensorrt.cmake", "content": "find_library(\n      libmyelin_compiler\n      names libmyelin_compiler_static.a myelin_compiler_static.lib myelin64_1.lib\n            myelin64_1\n      paths ${__found_trt_root}/lib)"}, {"filenames": ["libmyelin_executor_static.a", "myelin_executor_static.lib", "myelin64_1.lib", "myelin64_1"], "version": "", "fromfile": "MegEngine@@MegEngine/cmake/tensorrt.cmake", "content": "find_library(\n      libmyelin_executor\n      names libmyelin_executor_static.a myelin_executor_static.lib myelin64_1.lib\n            myelin64_1\n      paths ${__found_trt_root}/lib)"}, {"filenames": ["libmyelin_pattern_runtime_static.a", "myelin_pattern_runtime_static.lib", "myelin64_1.lib", "myelin64_1"], "version": "", "fromfile": "MegEngine@@MegEngine/cmake/tensorrt.cmake", "content": "find_library(\n      libmyelin_pattern_runtime\n      names libmyelin_pattern_runtime_static.a myelin_pattern_runtime_static.lib\n            myelin64_1.lib myelin64_1\n      paths ${__found_trt_root}/lib)"}, {"filenames": ["libmyelin_pattern_library_static.a", "myelin_pattern_library_static.lib", "myelin64_1.lib", "myelin64_1"], "version": "", "fromfile": "MegEngine@@MegEngine/cmake/tensorrt.cmake", "content": "find_library(\n      libmyelin_pattern_library\n      names libmyelin_pattern_library_static.a myelin_pattern_library_static.lib\n            myelin64_1.lib myelin64_1\n      paths ${__found_trt_root}/lib)"}, {"filenames": ["libmyelin.so", "myelin.dll", "myelin64_1.dll", "myelin64_1"], "version": "", "fromfile": "MegEngine@@MegEngine/cmake/tensorrt.cmake", "content": "find_library(\n      libmyelin_shared\n      names libmyelin.so myelin.dll myelin64_1.dll myelin64_1\n      paths ${__found_trt_root}/lib)"}]}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [{"depname": "cudnn", "version": null, "version_op": null, "unified_name": "cudnn", "extractor_type": "cmake", "context": "set(cudnn_version ${cudnn_major_version}.${cudnn_minor_version}.${cudnn_patch_version})", "confidence": "Low"}, {"depname": "cudnn", "version": null, "version_op": null, "unified_name": "cudnn", "extractor_type": "cmake::pkg", "context": "pkg_check_modules(pc_cudnn quiet cudnn)", "confidence": "High"}], "type": "cmake", "libs": [{"filenames": ["libcudnn_static.a", "cudnn.lib"], "version": "", "fromfile": "MegEngine@@MegEngine/cmake/cudnn.cmake", "content": "find_library(\n    cudnn_library\n    names libcudnn_static.a cudnn.lib\n    paths ${alter_ld_library_paths} ${cudnn_root_dir} ${pc_cudnn_library_dirs}\n          ${cmake_install_prefix}\n    hints ${alter_library_paths}\n    path_suffixes lib lib64 lib/x64\n    doc \"cudnn library.\")"}, {"filenames": ["libcudnn.so", "libcudnn.dylib", "cudnn64_8.dll", "cudnn.dll", "cudnn64_8", "cudnn"], "version": "", "fromfile": "MegEngine@@MegEngine/cmake/cudnn.cmake", "content": "find_library(\n    cudnn_library\n    names libcudnn.so libcudnn.dylib cudnn64_8.dll cudnn.dll cudnn64_8 cudnn\n    paths ${alter_ld_library_paths} ${cudnn_root_dir} ${pc_cudnn_library_dirs}\n          ${cmake_install_prefix}\n    hints ${alter_library_paths}\n    path_suffixes lib lib64 bin\n    doc \"cudnn library.\")"}]}, {"deps": [], "type": "cmake", "libs": [{"filenames": ["libcupti_static.a"], "version": "", "fromfile": "MegEngine@@MegEngine/cmake/cupti.cmake", "content": "find_library(\n    cupti_library\n    names libcupti_static.a\n    hints $env{cuda_bin_path} $env{cuda_bin_path}/extras/cupti\n    path_suffixes lib lib64\n    doc \"cupti library.\")"}, {"filenames": ["libcupti.so"], "version": "", "fromfile": "MegEngine@@MegEngine/cmake/cupti.cmake", "content": "find_library(\n    cupti_library\n    names libcupti.so\n    hints $env{cuda_bin_path} $env{cuda_bin_path}/extras/cupti\n    path_suffixes lib lib64\n    doc \"cupti library.\")"}]}, {"deps": [{"depname": "hip", "version": null, "version_op": null, "unified_name": "hip", "extractor_type": "cmake", "context": "find_package(hip quiet)", "confidence": "High"}], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": [{"filenames": ["libmagicmind_runtime.so"], "version": "", "fromfile": "MegEngine@@MegEngine/cmake/magicmind.cmake", "content": "find_library(\n  magicmind_runtime_library\n  names libmagicmind_runtime.so\n  paths \"${__found_magicmind_root}/lib64\")"}]}, {"deps": [], "type": "cmake", "libs": [{"filenames": ["libcnnl_extra.so"], "version": "", "fromfile": "MegEngine@@MegEngine/cmake/cnnl.cmake", "content": "find_library(\n  cnnl_extra_library\n  names libcnnl_extra.so\n  paths ${alter_ld_library_paths} \"$env{neuware_home}/lib64\" ${cmake_install_prefix}\n  hints ${alter_library_paths}\n  path_suffixes lib lib64\n  doc \"cnnl_extra library.\")"}]}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [{"depname": "cpuinfo", "version": null, "version_op": null, "unified_name": "cpuinfo", "extractor_type": "cmake", "context": "find_package(cpuinfo)", "confidence": "High"}], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [{"depname": "openblas", "version": null, "version_op": null, "unified_name": "openblas", "extractor_type": "cmake", "context": "find_package(openblas)", "confidence": "High"}], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [{"depname": "flatbuffers", "version": null, "version_op": null, "unified_name": "flatbuffers", "extractor_type": "cmake", "context": "find_package(flatbuffers required)", "confidence": "High"}], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [{"depname": "numpy", "version": null, "version_op": null, "unified_name": "numpy", "extractor_type": "cmake", "context": "MegEngine@@MegEngine/cmake/Modules/FindNumPy.cmake", "confidence": "High"}], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "make"}, {"deps": [], "type": "bazel"}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "make"}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "make"}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "bazel"}, {"deps": [], "type": "bazel"}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [{"depname": "${argn}", "version": null, "version_op": null, "unified_name": "${argn}", "extractor_type": "cmake", "context": "find_package(${argn})", "confidence": "High"}], "type": "cmake", "libs": [{"filenames": ["install_name_tool"], "version": "", "fromfile": "MegEngine@@MegEngine/toolchains/ios.toolchain.cmake", "content": "find_program(cmake_install_name_tool install_name_tool)"}]}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}]}