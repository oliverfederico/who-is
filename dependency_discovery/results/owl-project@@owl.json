{"target": "owl-project@@owl", "extractors": [{"deps": [{"depname": "optix", "version": "1.1.5", "version_op": null, "unified_name": "optix", "extractor_type": "cmake", "context": "project(optix-owl version 1.1.5 languages c cxx cuda)", "confidence": "High"}], "type": "cmake", "libs": []}, {"deps": [{"depname": "glfw3", "version": null, "version_op": null, "unified_name": "glfw3", "extractor_type": "cmake", "context": "find_package(glfw3 quiet)", "confidence": "High"}, {"depname": "opengl", "version": null, "version_op": null, "unified_name": "opengl", "extractor_type": "cmake", "context": "find_package(opengl required optional_components opengl)", "confidence": "High"}], "type": "cmake", "libs": []}, {"deps": [{"depname": "x11", "version": null, "version_op": null, "unified_name": "x11", "extractor_type": "cmake", "context": "find_package(x11 required)", "confidence": "High"}, {"depname": "ecm", "version": null, "version_op": null, "unified_name": "ecm", "extractor_type": "cmake", "context": "find_package(ecm required no_module)", "confidence": "High"}, {"depname": "wayland", "version": null, "version_op": null, "unified_name": "wayland", "extractor_type": "cmake", "context": "find_package(wayland required client cursor egl)", "confidence": "High"}, {"depname": "waylandscanner", "version": null, "version_op": null, "unified_name": "waylandscanner", "extractor_type": "cmake", "context": "find_package(waylandscanner required)", "confidence": "High"}, {"depname": "waylandprotocols", "version": "1.15", "version_op": null, "unified_name": "waylandprotocols", "extractor_type": "cmake", "context": "find_package(waylandprotocols 1.15 required)", "confidence": "High"}, {"depname": "xkbcommon", "version": null, "version_op": null, "unified_name": "xkbcommon", "extractor_type": "cmake", "context": "find_package(xkbcommon required)", "confidence": "High"}, {"depname": "epollshim", "version": null, "version_op": null, "unified_name": "epollshim", "extractor_type": "cmake", "context": "find_package(epollshim)", "confidence": "High"}, {"depname": "osmesa", "version": null, "version_op": null, "unified_name": "osmesa", "extractor_type": "cmake", "context": "find_package(osmesa required)", "confidence": "High"}, {"depname": "glfw", "version": "3.4.0", "version_op": null, "unified_name": "glfw", "extractor_type": "cmake", "context": "project(glfw version 3.4.0 languages c)", "confidence": "High"}], "type": "cmake", "libs": [{"filenames": ["rt"], "version": "", "fromfile": "owl-project@@owl/3rdParty/glfw/CMakeLists.txt", "content": "find_library(rt_library rt)"}, {"filenames": ["m"], "version": "", "fromfile": "owl-project@@owl/3rdParty/glfw/CMakeLists.txt", "content": "find_library(math_library m)"}]}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [{"depname": "cmake_system", "version": "1", "version_op": null, "unified_name": "cmake_system", "extractor_type": "cmake", "context": "set(cmake_system_version 1)", "confidence": "Low"}], "type": "cmake", "libs": []}, {"deps": [{"depname": "cmake_system", "version": "1", "version_op": null, "unified_name": "cmake_system", "extractor_type": "cmake", "context": "set(cmake_system_version 1)", "confidence": "Low"}], "type": "cmake", "libs": []}, {"deps": [{"depname": "cmake_system", "version": "1", "version_op": null, "unified_name": "cmake_system", "extractor_type": "cmake", "context": "set(cmake_system_version 1)", "confidence": "Low"}], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [{"depname": "cmake_system", "version": "1", "version_op": null, "unified_name": "cmake_system", "extractor_type": "cmake", "context": "set(cmake_system_version 1)", "confidence": "Low"}], "type": "cmake", "libs": []}, {"deps": [{"depname": "epollshim", "version": null, "version_op": null, "unified_name": "epollshim", "extractor_type": "cmake", "context": "owl-project@@owl/3rdParty/glfw/CMake/modules/FindEpollShim.cmake", "confidence": "High"}], "type": "cmake", "libs": [{"filenames": ["epoll-shim", "libepoll-shim"], "version": "", "fromfile": "owl-project@@owl/3rdParty/glfw/CMake/modules/FindEpollShim.cmake", "content": "find_library(epollshim_libraries names epoll-shim libepoll-shim hints /usr/local/lib)"}]}, {"deps": [{"depname": "osmesa", "version": null, "version_op": null, "unified_name": "osmesa", "extractor_type": "cmake", "context": "owl-project@@owl/3rdParty/glfw/CMake/modules/FindOSMesa.cmake", "confidence": "High"}, {"depname": "pkgconfig", "version": null, "version_op": null, "unified_name": "pkgconfig", "extractor_type": "cmake", "context": "find_package (pkgconfig)", "confidence": "High"}, {"depname": "osmesa", "version": null, "version_op": null, "unified_name": "osmesa", "extractor_type": "cmake::pkg", "context": "pkg_check_modules (pkg_osmesa quiet osmesa)", "confidence": "High"}], "type": "cmake", "libs": []}, {"deps": [{"depname": "xkbcommon", "version": null, "version_op": null, "unified_name": "xkbcommon", "extractor_type": "cmake", "context": "owl-project@@owl/3rdParty/glfw/CMake/modules/FindXKBCommon.cmake", "confidence": "High"}, {"depname": "pkgconfig", "version": null, "version_op": null, "unified_name": "pkgconfig", "extractor_type": "cmake", "context": "find_package(pkgconfig)", "confidence": "High"}, {"depname": "xkbcommon", "version": null, "version_op": null, "unified_name": "xkbcommon", "extractor_type": "cmake::pkg", "context": "pkg_check_modules(pc_xkbcommon quiet xkbcommon)", "confidence": "High"}], "type": "cmake", "libs": [{"filenames": ["xkbcommon"], "version": "", "fromfile": "owl-project@@owl/3rdParty/glfw/CMake/modules/FindXKBCommon.cmake", "content": "find_library(xkbcommon_library\n    names xkbcommon\n    hints ${pc_xkbcommon_library} ${pc_xkbcommon_library_dirs}\n)"}]}, {"deps": [{"depname": "waylandprotocols", "version": null, "version_op": null, "unified_name": "waylandprotocols", "extractor_type": "cmake", "context": "owl-project@@owl/3rdParty/glfw/CMake/modules/FindWaylandProtocols.cmake", "confidence": "High"}, {"depname": "wayland_protocols", "version": null, "version_op": null, "unified_name": "wayland_protocols", "extractor_type": "cmake", "context": "set(wayland_protocols_version ${waylandprotocols_version})", "confidence": "Low"}, {"depname": "wayland-protocols", "version": "${waylandprotocols_find_version}", "version_op": ">=", "unified_name": "wayland-protocols", "extractor_type": "cmake::pkg", "context": "pkg_check_modules(waylandprotocols quiet wayland-protocols>=${waylandprotocols_find_version})", "confidence": "High"}], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [{"depname": "opengl", "version": null, "version_op": null, "unified_name": "opengl", "extractor_type": "cmake", "context": "find_package(opengl required optional_components opengl)", "confidence": "High"}], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [{"depname": "optix", "version": null, "version_op": null, "unified_name": "optix", "extractor_type": "cmake", "context": "find_package(optix required)", "confidence": "High"}, {"depname": "cudatoolkit", "version": null, "version_op": null, "unified_name": "cudatoolkit", "extractor_type": "cmake", "context": "find_package(cudatoolkit required)", "confidence": "High"}], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [{"depname": "tbb", "version": null, "version_op": null, "unified_name": "tbb", "extractor_type": "cmake", "context": "find_package(tbb config)", "confidence": "High"}, {"depname": "tbb", "version": null, "version_op": null, "unified_name": "tbb", "extractor_type": "cmake", "context": "find_package(tbb)", "confidence": "High"}], "type": "cmake", "libs": []}, {"deps": [{"depname": "optix", "version": null, "version_op": null, "unified_name": "optix", "extractor_type": "cmake", "context": "owl-project@@owl/owl/cmake/FindOptiX.cmake", "confidence": "High"}], "type": "cmake", "libs": []}, {"deps": [{"depname": "tbb", "version": null, "version_op": null, "unified_name": "tbb", "extractor_type": "cmake", "context": "owl-project@@owl/owl/cmake/FindTBB.cmake", "confidence": "High"}, {"depname": "tbb", "version": null, "version_op": null, "unified_name": "tbb", "extractor_type": "cmake", "context": "  set(tbb_version \"${cmake_match_1}.${cmake_match_1}\")", "confidence": "Low"}], "type": "cmake", "libs": [{"filenames": ["tbb"], "version": "", "fromfile": "owl-project@@owl/owl/cmake/FindTBB.cmake", "content": "find_library(tbb_library tbb ${tbb_lib_hints})"}, {"filenames": ["tbb_debug"], "version": "", "fromfile": "owl-project@@owl/owl/cmake/FindTBB.cmake", "content": "find_library(tbb_library_debug tbb_debug ${tbb_lib_hints})"}, {"filenames": ["tbbmalloc"], "version": "", "fromfile": "owl-project@@owl/owl/cmake/FindTBB.cmake", "content": "find_library(tbb_library_malloc tbbmalloc ${tbb_lib_hints})"}, {"filenames": ["tbbmalloc_debug"], "version": "", "fromfile": "owl-project@@owl/owl/cmake/FindTBB.cmake", "content": "find_library(tbb_library_malloc_debug tbbmalloc_debug ${tbb_lib_hints})"}, {"filenames": ["tbb"], "version": "", "fromfile": "owl-project@@owl/owl/cmake/FindTBB.cmake", "content": "find_library(tbb_library tbb paths $env{tbbroot}/lib no_default_path)"}, {"filenames": ["tbb_debug"], "version": "", "fromfile": "owl-project@@owl/owl/cmake/FindTBB.cmake", "content": "find_library(tbb_library_debug tbb_debug paths $env{tbbroot}/lib no_default_path)"}, {"filenames": ["tbbmalloc"], "version": "", "fromfile": "owl-project@@owl/owl/cmake/FindTBB.cmake", "content": "find_library(tbb_library_malloc tbbmalloc paths $env{tbbroot}/lib no_default_path)"}, {"filenames": ["tbbmalloc_debug"], "version": "", "fromfile": "owl-project@@owl/owl/cmake/FindTBB.cmake", "content": "find_library(tbb_library_malloc_debug tbbmalloc_debug paths $env{tbbroot}/lib no_default_path)"}, {"filenames": ["libtbb.so.2"], "version": "", "fromfile": "owl-project@@owl/owl/cmake/FindTBB.cmake", "content": "find_library(tbb_library libtbb.so.2 ${tbb_hints})"}, {"filenames": ["libtbb_debug.so.2"], "version": "", "fromfile": "owl-project@@owl/owl/cmake/FindTBB.cmake", "content": "find_library(tbb_library_debug libtbb_debug.so.2 ${tbb_hints})"}, {"filenames": ["libtbbmalloc.so.2"], "version": "", "fromfile": "owl-project@@owl/owl/cmake/FindTBB.cmake", "content": "find_library(tbb_library_malloc libtbbmalloc.so.2 ${tbb_hints})"}, {"filenames": ["libtbbmalloc_debug.so.2"], "version": "", "fromfile": "owl-project@@owl/owl/cmake/FindTBB.cmake", "content": "find_library(tbb_library_malloc_debug libtbbmalloc_debug.so.2 ${tbb_hints})"}]}, {"deps": [], "type": "cmake", "libs": [{"filenames": ["bin2c"], "version": "", "fromfile": "owl-project@@owl/owl/cmake/embed_ptx.cmake", "content": "find_program(bin_to_c names bin2c paths ${cuda_compiler_bin})"}]}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [{"depname": "owlsubmoduletest", "version": null, "version_op": null, "unified_name": "owlsubmoduletest", "extractor_type": "cmake", "context": "project(owlsubmoduletest languages c cxx cuda)", "confidence": ""}], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}]}