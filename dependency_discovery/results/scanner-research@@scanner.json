{"target": "scanner-research@@scanner", "extractors": [{"deps": [{"depname": "doxygen", "version": null, "version_op": null, "unified_name": "doxygen", "extractor_type": "cmake", "context": "find_package(doxygen required)", "confidence": "High"}, {"depname": "scanner", "version": null, "version_op": null, "unified_name": "scanner", "extractor_type": "cmake", "context": "project(scanner)", "confidence": ""}], "type": "cmake", "libs": []}, {"deps": [{"depname": "cuda", "version": null, "version_op": null, "unified_name": "cuda", "extractor_type": "cmake", "context": "find_package(cuda required)", "confidence": "High"}, {"depname": "nvcuvid", "version": null, "version_op": null, "unified_name": "nvcuvid", "extractor_type": "cmake", "context": "find_package(nvcuvid required)", "confidence": "High"}, {"depname": "ffmpeg", "version": null, "version_op": null, "unified_name": "ffmpeg", "extractor_type": "cmake", "context": "find_package(ffmpeg required)", "confidence": "High"}, {"depname": "hwang", "version": null, "version_op": null, "unified_name": "hwang", "extractor_type": "cmake", "context": "find_package(hwang required)", "confidence": "High"}, {"depname": "saneprotobuf", "version": null, "version_op": null, "unified_name": "saneprotobuf", "extractor_type": "cmake", "context": "find_package(saneprotobuf required)", "confidence": "High"}, {"depname": "grpc", "version": null, "version_op": null, "unified_name": "grpc", "extractor_type": "cmake", "context": "find_package(grpc required)", "confidence": "High"}, {"depname": "liblzma", "version": null, "version_op": null, "unified_name": "lzma", "extractor_type": "cmake", "context": "find_package(liblzma required)", "confidence": "High"}, {"depname": "openssl", "version": null, "version_op": null, "unified_name": "openssl", "extractor_type": "cmake", "context": "find_package(openssl required)", "confidence": "High"}, {"depname": "bzip2", "version": null, "version_op": null, "unified_name": "bzip2", "extractor_type": "cmake", "context": "find_package(bzip2 required)", "confidence": "High"}, {"depname": "gflags", "version": null, "version_op": null, "unified_name": "gflags", "extractor_type": "cmake", "context": "find_package(gflags required)", "confidence": "High"}, {"depname": "glog", "version": null, "version_op": null, "unified_name": "glog", "extractor_type": "cmake", "context": "find_package(glog required)", "confidence": "High"}, {"depname": "googletest", "version": null, "version_op": null, "unified_name": "googletest", "extractor_type": "cmake", "context": "find_package(googletest required)", "confidence": "High"}, {"depname": "curl", "version": null, "version_op": null, "unified_name": "curl", "extractor_type": "cmake", "context": "find_package(curl required)", "confidence": "High"}, {"depname": "iconv", "version": null, "version_op": null, "unified_name": "iconv", "extractor_type": "cmake", "context": "find_package(iconv required)", "confidence": "High"}, {"depname": "jpeg", "version": null, "version_op": null, "unified_name": "jpeg", "extractor_type": "cmake", "context": "find_package(jpeg required)", "confidence": "High"}, {"depname": "storehouse", "version": null, "version_op": null, "unified_name": "storehouse", "extractor_type": "cmake", "context": "find_package(storehouse required config\n  paths \"${cmake_source_dir}/thirdparty/install\"\n  \"${storehouse_dir}\")", "confidence": "High"}, {"depname": "tinytoml", "version": null, "version_op": null, "unified_name": "tinytoml", "extractor_type": "cmake", "context": "find_package(tinytoml required)", "confidence": "High"}, {"depname": "pybind11", "version": null, "version_op": null, "unified_name": "pybind11", "extractor_type": "cmake", "context": "find_package(pybind11 required)", "confidence": "High"}, {"depname": "openmp", "version": null, "version_op": null, "unified_name": "openmp", "extractor_type": "cmake", "context": "find_package(openmp required)", "confidence": "High"}, {"depname": "pybind11_python", "version": "3", "version_op": null, "unified_name": "pybind11_python", "extractor_type": "cmake", "context": "\nset(pybind11_python_version 3)", "confidence": "Low"}], "type": "cmake", "libs": []}, {"deps": [{"depname": "saneprotobuf", "version": null, "version_op": null, "unified_name": "saneprotobuf", "extractor_type": "cmake", "context": "find_package(saneprotobuf required)", "confidence": "High"}, {"depname": "cuda", "version": null, "version_op": null, "unified_name": "cuda", "extractor_type": "cmake", "context": "find_package(cuda required)", "confidence": "High"}], "type": "cmake", "libs": []}, {"deps": [{"depname": "tinytoml", "version": null, "version_op": null, "unified_name": "tinytoml", "extractor_type": "cmake", "context": "scanner-research@@scanner/cmake/Modules/FindTinyToml.cmake", "confidence": "High"}], "type": "cmake", "libs": []}, {"deps": [{"depname": "gflags", "version": null, "version_op": null, "unified_name": "gflags", "extractor_type": "cmake", "context": "scanner-research@@scanner/cmake/Modules/FindGFlags.cmake", "confidence": "High"}], "type": "cmake", "libs": [{"filenames": ["libgflags"], "version": "", "fromfile": "scanner-research@@scanner/cmake/Modules/FindGFlags.cmake", "content": "find_library(gflags_library_release \n        names libgflags\n        hints $env{gflags_dir}\n        path_suffixes release)"}, {"filenames": ["libgflags-debug"], "version": "", "fromfile": "scanner-research@@scanner/cmake/Modules/FindGFlags.cmake", "content": "find_library(gflags_library_debug\n        names libgflags-debug\n        hints $env{gflags_dir}\n        path_suffixes debug)"}, {"filenames": ["gflags"], "version": "", "fromfile": "scanner-research@@scanner/cmake/Modules/FindGFlags.cmake", "content": "find_library(gflags_library gflags\n    hints $env{gflags_dir}/lib)"}]}, {"deps": [{"depname": "ffmpeg", "version": null, "version_op": null, "unified_name": "ffmpeg", "extractor_type": "cmake", "context": "scanner-research@@scanner/cmake/Modules/FindFFmpeg.cmake", "confidence": "High"}, {"depname": "pkgconfig", "version": null, "version_op": null, "unified_name": "pkgconfig", "extractor_type": "cmake", "context": "find_package(pkgconfig)", "confidence": "High"}, {"depname": "libavcodec", "version": null, "version_op": null, "unified_name": "avcodec", "extractor_type": "cmake::pkg", "context": "pkg_check_modules(_ffmpeg_avcodec libavcodec)", "confidence": "High"}, {"depname": "libavformat", "version": null, "version_op": null, "unified_name": "avformat", "extractor_type": "cmake::pkg", "context": "pkg_check_modules(_ffmpeg_avformat libavformat)", "confidence": "High"}, {"depname": "libavutil", "version": null, "version_op": null, "unified_name": "avutil", "extractor_type": "cmake::pkg", "context": "pkg_check_modules(_ffmpeg_avutil libavutil)", "confidence": "High"}], "type": "cmake", "libs": [{"filenames": ["avcodec"], "version": "", "fromfile": "scanner-research@@scanner/cmake/Modules/FindFFmpeg.cmake", "content": "find_library(ffmpeg_libavcodec\nnames avcodec\npaths ${_ffmpeg_avcodec_library_dirs} /usr/lib /usr/local/lib /opt/local/lib /sw/lib\n)"}, {"filenames": ["avformat"], "version": "", "fromfile": "scanner-research@@scanner/cmake/Modules/FindFFmpeg.cmake", "content": "find_library(ffmpeg_libavformat\nnames avformat\npaths ${_ffmpeg_avformat_library_dirs} /usr/lib /usr/local/lib /opt/local/lib /sw/lib\n)"}, {"filenames": ["avutil"], "version": "", "fromfile": "scanner-research@@scanner/cmake/Modules/FindFFmpeg.cmake", "content": "find_library(ffmpeg_libavutil\nnames avutil\npaths ${_ffmpeg_avutil_library_dirs} /usr/lib /usr/local/lib /opt/local/lib /sw/lib\n)"}, {"filenames": ["swresample"], "version": "", "fromfile": "scanner-research@@scanner/cmake/Modules/FindFFmpeg.cmake", "content": "find_library(ffmpeg_libswresample\nnames swresample\npaths ${_ffmpeg_avutil_library_dirs} /usr/lib /usr/local/lib /opt/local/lib /sw/lib\n)"}, {"filenames": ["swscale"], "version": "", "fromfile": "scanner-research@@scanner/cmake/Modules/FindFFmpeg.cmake", "content": "find_library(ffmpeg_libswscale\nnames swscale\npaths ${_ffmpeg_avcodec_library_dirs} /usr/lib /usr/local/lib /opt/local/lib /sw/lib\n)"}]}, {"deps": [{"depname": "iconv", "version": null, "version_op": null, "unified_name": "iconv", "extractor_type": "cmake", "context": "scanner-research@@scanner/cmake/Modules/FindIconv.cmake", "confidence": "High"}], "type": "cmake", "libs": [{"filenames": ["iconv", "libiconv", "libiconv-2", "c"], "version": "", "fromfile": "scanner-research@@scanner/cmake/Modules/FindIconv.cmake", "content": "find_library(iconv_libraries names iconv libiconv libiconv-2 c)"}]}, {"deps": [{"depname": "folly", "version": null, "version_op": null, "unified_name": "folly", "extractor_type": "cmake", "context": "scanner-research@@scanner/cmake/Modules/FindFolly.cmake", "confidence": "High"}], "type": "cmake", "libs": [{"filenames": ["folly"], "version": "", "fromfile": "scanner-research@@scanner/cmake/Modules/FindFolly.cmake", "content": "find_library(folly_library folly\n  paths $env{folly_dir}/lib)"}, {"filenames": ["follybenchmark"], "version": "", "fromfile": "scanner-research@@scanner/cmake/Modules/FindFolly.cmake", "content": "find_library(folly_benchmark_library follybenchmark\n  paths $env{folly_dir}/lib)"}]}, {"deps": [{"depname": "proxygen", "version": null, "version_op": null, "unified_name": "proxygen", "extractor_type": "cmake", "context": "scanner-research@@scanner/cmake/Modules/FindProxygen.cmake", "confidence": "High"}], "type": "cmake", "libs": [{"filenames": ["proxygenlib"], "version": "", "fromfile": "scanner-research@@scanner/cmake/Modules/FindProxygen.cmake", "content": "find_library(proxygen_library proxygenlib\n  paths $env{proxygen_dir}/lib)"}, {"filenames": ["proxygenhttpserver"], "version": "", "fromfile": "scanner-research@@scanner/cmake/Modules/FindProxygen.cmake", "content": "find_library(proxygen_http_server_library proxygenhttpserver\n  paths $env{proxygen_dir}/lib)"}, {"filenames": ["proxygencurl"], "version": "", "fromfile": "scanner-research@@scanner/cmake/Modules/FindProxygen.cmake", "content": "find_library(proxygen_curl_library proxygencurl\n  paths $env{proxygen_dir}/lib)"}]}, {"deps": [{"depname": "grpc", "version": null, "version_op": null, "unified_name": "grpc", "extractor_type": "cmake", "context": "scanner-research@@scanner/cmake/Modules/FindGRPC.cmake", "confidence": "High"}], "type": "cmake", "libs": [{"filenames": ["grpc++_unsecure"], "version": "", "fromfile": "scanner-research@@scanner/cmake/Modules/FindGRPC.cmake", "content": "find_library(grpcpp_unsecure_library grpc++_unsecure\n  paths\n  ${grpc_dir}/lib)"}, {"filenames": ["grpc"], "version": "", "fromfile": "scanner-research@@scanner/cmake/Modules/FindGRPC.cmake", "content": "find_library(grpc_library grpc\n  paths\n  ${grpc_dir}/lib)"}, {"filenames": ["gpr"], "version": "", "fromfile": "scanner-research@@scanner/cmake/Modules/FindGRPC.cmake", "content": "find_library(gpr_library gpr\n  paths\n  ${grpc_dir}/lib)"}]}, {"deps": [{"depname": "doxygen", "version": null, "version_op": null, "unified_name": "doxygen", "extractor_type": "cmake", "context": "scanner-research@@scanner/cmake/Modules/FindDoxygen.cmake", "confidence": "High"}, {"depname": "doxygen", "version": null, "version_op": null, "unified_name": "doxygen", "extractor_type": "cmake", "context": "find_package(doxygen\n               required dot\n               optional_components mscgen dia)", "confidence": "High"}], "type": "cmake", "libs": [{"filenames": ["doxygen"], "version": "", "fromfile": "scanner-research@@scanner/cmake/Modules/FindDoxygen.cmake", "content": "find_program(\n        doxygen_executable\n        names doxygen\n        paths\n            \"[hkey_local_machine\\\\software\\\\microsoft\\\\windows\\\\currentversion\\\\uninstall\\\\doxygen_is1;inno setup: app path]/bin\"\n            /applications/doxygen.app/contents/resources\n            /applications/doxygen.app/contents/macos\n        doc \"doxygen documentation generation tool (http://www.doxygen.org)\"\n    )"}, {"filenames": ["dia"], "version": "", "fromfile": "scanner-research@@scanner/cmake/Modules/FindDoxygen.cmake", "content": "find_program(\n        doxygen_dia_executable\n        names dia\n        paths\n            \"$env{programfiles}/dia\"\n            \"$env{programfiles${_x86}}/dia\"\n        doc \"diagram editor tool for use with doxygen\"\n    )"}, {"filenames": ["dot"], "version": "", "fromfile": "scanner-research@@scanner/cmake/Modules/FindDoxygen.cmake", "content": "find_program(\n        doxygen_dot_executable\n        names dot\n        paths\n            ${_doxygen_graphviz_bin_dirs}\n            \"$env{programfiles}/att/graphviz/bin\"\n            \"c:/program files/att/graphviz/bin\"\n            [hkey_local_machine\\\\software\\\\att\\\\graphviz;installpath]/bin\n            /applications/graphviz.app/contents/macos\n            /applications/doxygen.app/contents/resources\n            /applications/doxygen.app/contents/macos\n        doc \"dot tool for use with doxygen\"\n    )"}, {"filenames": ["mscgen"], "version": "", "fromfile": "scanner-research@@scanner/cmake/Modules/FindDoxygen.cmake", "content": "find_program(\n        doxygen_mscgen_executable\n        names mscgen\n        paths\n            \"$env{programfiles}/mscgen\"\n            \"$env{programfiles${_x86}}/mscgen\"\n        doc \"message sequence chart tool for use with doxygen\"\n    )"}]}, {"deps": [{"depname": "nvcuvid", "version": null, "version_op": null, "unified_name": "nvcuvid", "extractor_type": "cmake", "context": "scanner-research@@scanner/cmake/Modules/FindNVCUVID.cmake", "confidence": "High"}], "type": "cmake", "libs": [{"filenames": ["nvcuvid"], "version": "", "fromfile": "scanner-research@@scanner/cmake/Modules/FindNVCUVID.cmake", "content": "find_library(nvcuvid_library nvcuvid\n  paths\n  ${nvcuvid_root_dir}/lib\n  /usr/local/cuda/lib64)"}]}, {"deps": [{"depname": "saneprotobuf", "version": null, "version_op": null, "unified_name": "saneprotobuf", "extractor_type": "cmake", "context": "scanner-research@@scanner/cmake/Modules/FindSaneProtobuf.cmake", "confidence": "High"}, {"depname": "threads", "version": null, "version_op": null, "unified_name": "threads", "extractor_type": "cmake", "context": "find_package(threads)", "confidence": "High"}], "type": "cmake", "libs": [{"filenames": ["${filename}"], "version": "", "fromfile": "scanner-research@@scanner/cmake/Modules/FindSaneProtobuf.cmake", "content": "find_library(${name}_library\n       names ${filename}\n       paths ${protobuf_src_root_folder}/vsprojects/${_protobuf_arch_dir}release)"}, {"filenames": ["${filename}"], "version": "", "fromfile": "scanner-research@@scanner/cmake/Modules/FindSaneProtobuf.cmake", "content": "find_library(${name}_library_debug\n       names ${filename}\n       paths ${protobuf_src_root_folder}/vsprojects/${_protobuf_arch_dir}debug)"}, {"filenames": ["protoc"], "version": "", "fromfile": "scanner-research@@scanner/cmake/Modules/FindSaneProtobuf.cmake", "content": "find_program(protobuf_protoc_executable\n    names protoc\n    doc \"the google protocol buffers compiler\"\n    paths\n    ${protobuf_src_root_folder}/vsprojects/${_protobuf_arch_dir}release\n    ${protobuf_src_root_folder}/vsprojects/${_protobuf_arch_dir}debug\n)"}, {"filenames": ["grpc_python_plugin"], "version": "", "fromfile": "scanner-research@@scanner/cmake/Modules/FindSaneProtobuf.cmake", "content": "find_program(grpc_python_plugin\n    names grpc_python_plugin\n    doc \"\"\n    paths\n    ${protobuf_src_root_folder}/vsprojects/${_protobuf_arch_dir}release\n    ${protobuf_src_root_folder}/vsprojects/${_protobuf_arch_dir}debug\n)"}, {"filenames": ["grpc_cpp_plugin"], "version": "", "fromfile": "scanner-research@@scanner/cmake/Modules/FindSaneProtobuf.cmake", "content": "find_program(grpc_cpp_plugin\n    names grpc_cpp_plugin\n    doc \"\"\n    paths\n    ${protobuf_src_root_folder}/vsprojects/${_protobuf_arch_dir}release\n    ${protobuf_src_root_folder}/vsprojects/${_protobuf_arch_dir}debug\n)"}]}, {"deps": [{"depname": "mfx", "version": null, "version_op": null, "unified_name": "mfx", "extractor_type": "cmake", "context": "scanner-research@@scanner/cmake/Modules/FindMFX.cmake", "confidence": "High"}], "type": "cmake", "libs": [{"filenames": ["libmfx.a"], "version": "", "fromfile": "scanner-research@@scanner/cmake/Modules/FindMFX.cmake", "content": "find_library ( mfx_library libmfx.a paths $env{mfx_home}/lib path_suffixes ${os_arch} )"}]}, {"deps": [{"depname": "eigen", "version": null, "version_op": null, "unified_name": "eigen", "extractor_type": "cmake", "context": "scanner-research@@scanner/cmake/Modules/FindEigen.cmake", "confidence": "High"}], "type": "cmake", "libs": []}, {"deps": [{"depname": "glog", "version": null, "version_op": null, "unified_name": "glog", "extractor_type": "cmake", "context": "scanner-research@@scanner/cmake/Modules/FindGlog.cmake", "confidence": "High"}], "type": "cmake", "libs": [{"filenames": ["libglog_static"], "version": "", "fromfile": "scanner-research@@scanner/cmake/Modules/FindGlog.cmake", "content": "find_library(glog_library_release libglog_static\n        hints $env{glog_dir}\n        path_suffixes release)"}, {"filenames": ["libglog_static"], "version": "", "fromfile": "scanner-research@@scanner/cmake/Modules/FindGlog.cmake", "content": "find_library(glog_library_debug libglog_static\n        hints $env{glog_dir}\n        path_suffixes debug)"}, {"filenames": ["glog"], "version": "", "fromfile": "scanner-research@@scanner/cmake/Modules/FindGlog.cmake", "content": "find_library(glog_library glog\n        hints $env{glog_dir}\n        path_suffixes\n            lib\n            lib64)"}]}, {"deps": [{"depname": "googletest", "version": null, "version_op": null, "unified_name": "googletest", "extractor_type": "cmake", "context": "scanner-research@@scanner/cmake/Modules/FindGoogleTest.cmake", "confidence": "High"}], "type": "cmake", "libs": [{"filenames": ["gtest"], "version": "", "fromfile": "scanner-research@@scanner/cmake/Modules/FindGoogleTest.cmake", "content": "find_library(googletest_library gtest\n  paths\n  $env{googletest_dir}/lib\n  ${cmake_source_dir}/thirdparty/install/lib)"}, {"filenames": ["gtest_main"], "version": "", "fromfile": "scanner-research@@scanner/cmake/Modules/FindGoogleTest.cmake", "content": "find_library(googletest_main gtest_main\n  paths\n  $env{googletest_dir}/lib\n  ${cmake_source_dir}/thirdparty/install/lib)"}]}, {"deps": [{"depname": "halide", "version": null, "version_op": null, "unified_name": "halide", "extractor_type": "cmake", "context": "scanner-research@@scanner/cmake/Modules/FindHalide.cmake", "confidence": "High"}], "type": "cmake", "libs": [{"filenames": ["halide"], "version": "", "fromfile": "scanner-research@@scanner/cmake/Modules/FindHalide.cmake", "content": "find_library(halide_libraries\n  names halide\n  hints ${halide_root_dir}/lib\n  )"}]}, {"deps": [{"depname": "hwang", "version": null, "version_op": null, "unified_name": "hwang", "extractor_type": "cmake", "context": "scanner-research@@scanner/cmake/Modules/FindHwang.cmake", "confidence": "High"}], "type": "cmake", "libs": [{"filenames": ["hwang"], "version": "", "fromfile": "scanner-research@@scanner/cmake/Modules/FindHwang.cmake", "content": "find_library(hwang_libraries\n  names hwang\n  hints ${hwang_root_dir}/lib\n  )"}]}, {"deps": [{"depname": "struck", "version": null, "version_op": null, "unified_name": "struck", "extractor_type": "cmake", "context": "scanner-research@@scanner/cmake/Modules/FindStruck.cmake", "confidence": "High"}], "type": "cmake", "libs": [{"filenames": ["caffe"], "version": "", "fromfile": "scanner-research@@scanner/cmake/Modules/FindStruck.cmake", "content": "find_library(struck_library caffe paths $env{struck_dir}/lib)"}]}, {"deps": [{"depname": "gipuma", "version": null, "version_op": null, "unified_name": "gipuma", "extractor_type": "cmake", "context": "scanner-research@@scanner/cmake/Modules/FindGipuma.cmake", "confidence": "High"}], "type": "cmake", "libs": [{"filenames": ["gipuma"], "version": "", "fromfile": "scanner-research@@scanner/cmake/Modules/FindGipuma.cmake", "content": "find_library(gipuma_library gipuma paths ${gipuma_root_dir}/lib)"}]}, {"deps": [], "type": "make"}, {"deps": [{"depname": "opencv", "version": null, "version_op": null, "unified_name": "opencv", "extractor_type": "cmake", "context": "find_package(opencv required components core imgproc)", "confidence": "High"}], "type": "cmake", "libs": []}, {"deps": [{"depname": "halide", "version": null, "version_op": null, "unified_name": "halide", "extractor_type": "cmake", "context": "find_package(halide required)", "confidence": "High"}], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "cmake", "libs": []}, {"deps": [], "type": "make"}, {"deps": [], "type": "make"}, {"deps": [], "type": "cmake", "libs": []}]}