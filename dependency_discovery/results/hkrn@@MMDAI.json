{"target": "hkrn@@MMDAI", "extractors": [{"deps": [{"depname": "htsengine", "version": null, "version_op": null, "unified_name": "htsengine", "extractor_type": "cmake", "context": "project(htsengine)", "confidence": ""}], "type": "cmake", "libs": [{"filenames": ["winmm"], "version": "", "fromfile": "hkrn@@MMDAI/scripts/CMake/HTSEngine.cmake", "content": "find_library(winmm_library winmm)"}]}, {"deps": [{"depname": "opengl", "version": null, "version_op": null, "unified_name": "opengl", "extractor_type": "cmake", "context": "find_package(opengl)", "confidence": "High"}, {"depname": "glee", "version": null, "version_op": null, "unified_name": "glee", "extractor_type": "cmake", "context": "project(glee)", "confidence": ""}], "type": "cmake", "libs": [{"filenames": ["foundation"], "version": "", "fromfile": "hkrn@@MMDAI/scripts/CMake/GLEE.cmake", "content": "find_library(foundation foundation)"}]}, {"deps": [{"depname": "zlib", "version": null, "version_op": null, "unified_name": "zlib", "extractor_type": "cmake", "context": "find_package(zlib)", "confidence": "High"}, {"depname": "julius", "version": null, "version_op": null, "unified_name": "julius", "extractor_type": "cmake", "context": "project(julius)", "confidence": ""}, {"depname": "dl", "version": null, "version_op": null, "unified_name": "dl", "extractor_type": "cmake", "context": "check_library_exists(dl dlopen \"\" have_dlopen)", "confidence": "High"}], "type": "cmake", "libs": [{"filenames": ["sndfile"], "version": "", "fromfile": "hkrn@@MMDAI/scripts/CMake/Julius.cmake", "content": "find_library(libsndfile_library sndfile)"}, {"filenames": ["coreservices"], "version": "", "fromfile": "hkrn@@MMDAI/scripts/CMake/Julius.cmake", "content": "find_library(coreservices_framework coreservices)"}, {"filenames": ["coreaudio"], "version": "", "fromfile": "hkrn@@MMDAI/scripts/CMake/Julius.cmake", "content": "find_library(coreaudio_framework coreaudio)"}, {"filenames": ["audiounit"], "version": "", "fromfile": "hkrn@@MMDAI/scripts/CMake/Julius.cmake", "content": "find_library(audiounit_framework audiounit)"}, {"filenames": ["audiotoolbox"], "version": "", "fromfile": "hkrn@@MMDAI/scripts/CMake/Julius.cmake", "content": "find_library(audiotoolbox_framework audiotoolbox)"}, {"filenames": ["portaudio"], "version": "", "fromfile": "hkrn@@MMDAI/scripts/CMake/Julius.cmake", "content": "find_library(pa_library portaudio)"}, {"filenames": ["\"winmm\""], "version": "", "fromfile": "hkrn@@MMDAI/scripts/CMake/Julius.cmake", "content": "find_library(winmm_library \"winmm\")"}, {"filenames": ["\"winmm\""], "version": "", "fromfile": "hkrn@@MMDAI/scripts/CMake/Julius.cmake", "content": "find_library(winmm_library \"winmm\")"}, {"filenames": ["\"dsound\""], "version": "", "fromfile": "hkrn@@MMDAI/scripts/CMake/Julius.cmake", "content": "find_library(dsound_library \"dsound\")"}, {"filenames": ["\"audiounit\""], "version": "", "fromfile": "hkrn@@MMDAI/scripts/CMake/Julius.cmake", "content": "find_library(audio_unit_framework \"audiounit\")"}, {"filenames": ["\"audiotoolbox\""], "version": "", "fromfile": "hkrn@@MMDAI/scripts/CMake/Julius.cmake", "content": "find_library(audio_toolbox_framework \"audiotoolbox\")"}, {"filenames": ["\"coreaudio\""], "version": "", "fromfile": "hkrn@@MMDAI/scripts/CMake/Julius.cmake", "content": "find_library(core_audio_framework \"coreaudio\")"}, {"filenames": ["\"coreservices\""], "version": "", "fromfile": "hkrn@@MMDAI/scripts/CMake/Julius.cmake", "content": "find_library(core_services_framework \"coreservices\")"}, {"filenames": ["socket"], "version": "", "fromfile": "hkrn@@MMDAI/scripts/CMake/Julius.cmake", "content": "find_library(socket_library socket)"}, {"filenames": ["iconv"], "version": "", "fromfile": "hkrn@@MMDAI/scripts/CMake/Julius.cmake", "content": "find_library(iconv_library iconv)"}, {"filenames": ["ws2_32"], "version": "", "fromfile": "hkrn@@MMDAI/scripts/CMake/Julius.cmake", "content": "find_library(winsock2_library ws2_32)"}, {"filenames": ["\"gzip\""], "version": "", "fromfile": "hkrn@@MMDAI/scripts/CMake/Julius.cmake", "content": "find_program(gzip_bin \"gzip\")"}]}, {"deps": [{"depname": "openjtalk", "version": null, "version_op": null, "unified_name": "openjtalk", "extractor_type": "cmake", "context": "project(openjtalk)", "confidence": ""}], "type": "cmake", "libs": [{"filenames": ["\"iconv\""], "version": "", "fromfile": "hkrn@@MMDAI/scripts/CMake/OpenJTalk.cmake", "content": "find_library(have_iconv \"iconv\")"}, {"filenames": ["\"m\""], "version": "", "fromfile": "hkrn@@MMDAI/scripts/CMake/OpenJTalk.cmake", "content": "find_library(have_libm \"m\")"}, {"filenames": ["htsengine"], "version": "", "fromfile": "hkrn@@MMDAI/scripts/CMake/OpenJTalk.cmake", "content": "find_library(hts_engine_lib htsengine)"}]}, {"deps": [{"depname": "nvfxcc", "version": null, "version_op": null, "unified_name": "nvfxcc", "extractor_type": "cmake", "context": "project(nvfxcc)", "confidence": ""}], "type": "cmake", "libs": [{"filenames": ["glfw3"], "version": "", "fromfile": "hkrn@@MMDAI/tools/nvfxcc/CMakeLists.txt", "content": "find_library(glfw_library glfw3 glfw)"}, {"filenames": ["glfw3"], "version": "", "fromfile": "hkrn@@MMDAI/tools/nvfxcc/CMakeLists.txt", "content": "find_library(glfw_library glfw3 glfw path_suffixes lib paths ${glfw_bundle_root} no_default_path)"}, {"filenames": ["fxlib64d"], "version": "", "fromfile": "hkrn@@MMDAI/tools/nvfxcc/CMakeLists.txt", "content": "find_library(nvfx_fxlib_library fxlib64d fxlibd)"}, {"filenames": ["fxlibgl64d"], "version": "", "fromfile": "hkrn@@MMDAI/tools/nvfxcc/CMakeLists.txt", "content": "find_library(nvfx_fxlibgl_library fxlibgl64d fxlibd)"}, {"filenames": ["fxparser64d"], "version": "", "fromfile": "hkrn@@MMDAI/tools/nvfxcc/CMakeLists.txt", "content": "find_library(nvfx_fxparser_library fxparser64d fxparserd)"}, {"filenames": ["fxlib64d"], "version": "", "fromfile": "hkrn@@MMDAI/tools/nvfxcc/CMakeLists.txt", "content": "find_library(nvfx_fxlib_library fxlib64d fxlibd path_suffixes lib paths ${nvfx_bundle_root} no_default_path)"}, {"filenames": ["fxlibgl64d"], "version": "", "fromfile": "hkrn@@MMDAI/tools/nvfxcc/CMakeLists.txt", "content": "find_library(nvfx_fxlibgl_library fxlibgl64d fxlibd path_suffixes lib paths ${nvfx_bundle_root} no_default_path)"}, {"filenames": ["fxparser64d"], "version": "", "fromfile": "hkrn@@MMDAI/tools/nvfxcc/CMakeLists.txt", "content": "find_library(nvfx_fxparser_library fxparser64d fxparserd path_suffixes lib paths ${nvfx_bundle_root} no_default_path)"}, {"filenames": ["regal"], "version": "", "fromfile": "hkrn@@MMDAI/tools/nvfxcc/CMakeLists.txt", "content": "find_library(regal_library regal path_suffixes lib paths ${regal_root} no_default_path)"}, {"filenames": ["glsl_optimizer"], "version": "", "fromfile": "hkrn@@MMDAI/tools/nvfxcc/CMakeLists.txt", "content": "find_library(glslopt_library glsl_optimizer path_suffixes build-debug paths ${glslopt_root} no_default_path)"}, {"filenames": ["glcpp-library"], "version": "", "fromfile": "hkrn@@MMDAI/tools/nvfxcc/CMakeLists.txt", "content": "find_library(glcpp_library glcpp-library path_suffixes build-debug paths ${glslopt_root} no_default_path)"}, {"filenames": ["mesa"], "version": "", "fromfile": "hkrn@@MMDAI/tools/nvfxcc/CMakeLists.txt", "content": "find_library(mesa_library mesa path_suffixes build-debug paths ${glslopt_root} no_default_path)"}, {"filenames": ["cocoa"], "version": "", "fromfile": "hkrn@@MMDAI/tools/nvfxcc/CMakeLists.txt", "content": "find_library(cocoa_framework cocoa)"}, {"filenames": ["corefoundation"], "version": "", "fromfile": "hkrn@@MMDAI/tools/nvfxcc/CMakeLists.txt", "content": "find_library(corefoundation_framework corefoundation)"}, {"filenames": ["iokit"], "version": "", "fromfile": "hkrn@@MMDAI/tools/nvfxcc/CMakeLists.txt", "content": "find_library(iokit_framework iokit)"}, {"filenames": ["opengl"], "version": "", "fromfile": "hkrn@@MMDAI/tools/nvfxcc/CMakeLists.txt", "content": "find_library(opengl_framework opengl)"}]}, {"deps": [{"depname": "ql4pmx", "version": null, "version_op": null, "unified_name": "ql4pmx", "extractor_type": "cmake", "context": "project(ql4pmx)", "confidence": ""}], "type": "cmake", "libs": [{"filenames": ["vpvl2"], "version": "", "fromfile": "hkrn@@MMDAI/tools/ql4pmx/CMakeLists.txt", "content": "find_library(vpvl2_library vpvl2 path_suffixes \"build-release-ql4pmx/install-root/lib\" paths ${vpvl2_source_dir} no_default_path)"}, {"filenames": ["mesa"], "version": "", "fromfile": "hkrn@@MMDAI/tools/ql4pmx/CMakeLists.txt", "content": "find_library(mesa3d_mesa_library mesa path_suffixes \"release\" \"darwin-x86_64/mesa\" paths \"${mesa3d_source_dir}/build\" no_default_path)"}, {"filenames": ["osmesa"], "version": "", "fromfile": "hkrn@@MMDAI/tools/ql4pmx/CMakeLists.txt", "content": "find_library(mesa3d_osmesa_library osmesa path_suffixes \"release\" \"darwin-x86_64/mesa/drivers/osmesa\" paths \"${mesa3d_source_dir}/build\" no_default_path)"}, {"filenames": ["foundation"], "version": "", "fromfile": "hkrn@@MMDAI/tools/ql4pmx/CMakeLists.txt", "content": "find_library(foundation_framework foundation)"}, {"filenames": ["cocoa"], "version": "", "fromfile": "hkrn@@MMDAI/tools/ql4pmx/CMakeLists.txt", "content": "find_library(cocoa_framework cocoa)"}, {"filenames": ["quicklook"], "version": "", "fromfile": "hkrn@@MMDAI/tools/ql4pmx/CMakeLists.txt", "content": "find_library(quicklook_framework quicklook)"}]}, {"deps": [{"depname": "qt5core", "version": null, "version_op": null, "unified_name": "qt5core", "extractor_type": "cmake", "context": "find_package(qt5core quiet)", "confidence": "High"}, {"depname": "qt4", "version": "4.8", "version_op": null, "unified_name": "qt4", "extractor_type": "cmake", "context": "find_package(qt4 4.8 required qtcore qtgui qtopengl)", "confidence": "High"}, {"depname": "vpvm", "version": null, "version_op": null, "unified_name": "vpvm", "extractor_type": "cmake", "context": "project(vpvm)", "confidence": ""}], "type": "cmake", "libs": [{"filenames": ["avcodec"], "version": "", "fromfile": "hkrn@@MMDAI/obsoletes/VPVM/CMakeLists.txt", "content": "find_library(avcodec_library avcodec paths \"${libav_install_directory}/lib\" no_default_path)"}, {"filenames": ["avformat"], "version": "", "fromfile": "hkrn@@MMDAI/obsoletes/VPVM/CMakeLists.txt", "content": "find_library(avformat_library avformat paths \"${libav_install_directory}/lib\" no_default_path)"}, {"filenames": ["avutil"], "version": "", "fromfile": "hkrn@@MMDAI/obsoletes/VPVM/CMakeLists.txt", "content": "find_library(avutil_library avutil paths \"${libav_install_directory}/lib\" no_default_path)"}, {"filenames": ["swscale"], "version": "", "fromfile": "hkrn@@MMDAI/obsoletes/VPVM/CMakeLists.txt", "content": "find_library(swscale_library swscale paths \"${libav_install_directory}/lib\" no_default_path)"}, {"filenames": ["vpvl2"], "version": "", "fromfile": "hkrn@@MMDAI/obsoletes/VPVM/CMakeLists.txt", "content": "find_library(vpvl2_library vpvl2 paths \"${vpvl2_build_directory}/lib\" no_default_path)"}, {"filenames": ["vpvl2qtcommon"], "version": "", "fromfile": "hkrn@@MMDAI/obsoletes/VPVM/CMakeLists.txt", "content": "find_library(vpvl2qtcommon_library vpvl2qtcommon paths \"${vpvl2_build_directory}/lib\" no_default_path)"}, {"filenames": ["cocoa"], "version": "", "fromfile": "hkrn@@MMDAI/obsoletes/VPVM/CMakeLists.txt", "content": "find_library(cocoa_library cocoa)"}]}, {"deps": [{"depname": "pkgconfig", "version": null, "version_op": null, "unified_name": "pkgconfig", "extractor_type": "cmake", "context": "find_package(pkgconfig)", "confidence": "High"}, {"depname": "libmmdme", "version": null, "version_op": null, "unified_name": "mmdme", "extractor_type": "cmake", "context": "project(libmmdme)", "confidence": ""}, {"depname": "bullet", "version": null, "version_op": null, "unified_name": "bullet", "extractor_type": "cmake::pkg", "context": "pkg_search_module(bullet required bullet)", "confidence": "High"}], "type": "cmake", "libs": [{"filenames": ["bulletcollision"], "version": "", "fromfile": "hkrn@@MMDAI/obsoletes/MMDME/CMakeLists.txt", "content": "find_library(bullet_lib_collision bulletcollision path $env{bullet_library_dir})"}, {"filenames": ["bulletdynamics"], "version": "", "fromfile": "hkrn@@MMDAI/obsoletes/MMDME/CMakeLists.txt", "content": "find_library(bullet_lib_dynamics bulletdynamics path $env{bullet_library_dir})"}, {"filenames": ["bulletsoftbody"], "version": "", "fromfile": "hkrn@@MMDAI/obsoletes/MMDME/CMakeLists.txt", "content": "find_library(bullet_lib_softbody bulletsoftbody path $env{bullet_library_dir})"}, {"filenames": ["linearmath"], "version": "", "fromfile": "hkrn@@MMDAI/obsoletes/MMDME/CMakeLists.txt", "content": "find_library(bullet_lib_linear_math linearmath path $env{bullet_library_dir})"}]}, {"deps": [{"depname": "opengl", "version": null, "version_op": null, "unified_name": "opengl", "extractor_type": "cmake", "context": "find_package(opengl)", "confidence": "High"}, {"depname": "pkgconfig", "version": null, "version_op": null, "unified_name": "pkgconfig", "extractor_type": "cmake", "context": "find_package(pkgconfig)", "confidence": "High"}, {"depname": "libmmdai", "version": null, "version_op": null, "unified_name": "mmdai", "extractor_type": "cmake", "context": "project(libmmdai)", "confidence": ""}, {"depname": "bullet", "version": null, "version_op": null, "unified_name": "bullet", "extractor_type": "cmake::pkg", "context": "pkg_search_module(bullet required bullet)", "confidence": "High"}], "type": "cmake", "libs": [{"filenames": ["glee"], "version": "", "fromfile": "hkrn@@MMDAI/obsoletes/MMDAI/CMakeLists.txt", "content": "find_library(glee_library glee path $env{glee_dir})"}, {"filenames": ["bulletcollision"], "version": "", "fromfile": "hkrn@@MMDAI/obsoletes/MMDAI/CMakeLists.txt", "content": "find_library(bullet_lib_collision bulletcollision path $env{bullet_library_dir})"}, {"filenames": ["bulletdynamics"], "version": "", "fromfile": "hkrn@@MMDAI/obsoletes/MMDAI/CMakeLists.txt", "content": "find_library(bullet_lib_dynamics bulletdynamics path $env{bullet_library_dir})"}, {"filenames": ["bulletsoftbody"], "version": "", "fromfile": "hkrn@@MMDAI/obsoletes/MMDAI/CMakeLists.txt", "content": "find_library(bullet_lib_softbody bulletsoftbody path $env{bullet_library_dir})"}, {"filenames": ["linearmath"], "version": "", "fromfile": "hkrn@@MMDAI/obsoletes/MMDAI/CMakeLists.txt", "content": "find_library(bullet_lib_linear_math linearmath path $env{bullet_library_dir})"}, {"filenames": ["mmdme"], "version": "", "fromfile": "hkrn@@MMDAI/obsoletes/MMDAI/CMakeLists.txt", "content": "find_library(mmdme_library mmdme path $env{mmdme_library_dir})"}]}, {"deps": [{"depname": "qt4", "version": "4.8", "version_op": null, "unified_name": "qt4", "extractor_type": "cmake", "context": "find_package(qt4 4.8 required qtcore qtgui qtopengl)", "confidence": "High"}, {"depname": "opencv", "version": null, "version_op": null, "unified_name": "opencv", "extractor_type": "cmake", "context": "find_package(opencv)", "confidence": "High"}, {"depname": "opengl", "version": null, "version_op": null, "unified_name": "opengl", "extractor_type": "cmake", "context": "find_package(opengl required)", "confidence": "High"}, {"depname": "libxml2", "version": null, "version_op": null, "unified_name": "xml2", "extractor_type": "cmake", "context": "find_package(libxml2 required)", "confidence": "High"}, {"depname": "sdl", "version": null, "version_op": null, "unified_name": "sdl", "extractor_type": "cmake", "context": "find_package(sdl required)", "confidence": "High"}, {"depname": "sdl_image", "version": null, "version_op": null, "unified_name": "sdl_image", "extractor_type": "cmake", "context": "find_package(sdl_image required)", "confidence": "High"}, {"depname": "libvpvl", "version": null, "version_op": null, "unified_name": "vpvl", "extractor_type": "cmake", "context": "project(libvpvl)", "confidence": ""}], "type": "cmake", "libs": [{"filenames": ["bulletcollision"], "version": "", "fromfile": "hkrn@@MMDAI/libvpvl/CMakeLists.txt", "content": "find_library(bullet_collision_lib bulletcollision paths ${bullet_library_local_dir} $env{bullet_library_dir})"}, {"filenames": ["bulletdynamics"], "version": "", "fromfile": "hkrn@@MMDAI/libvpvl/CMakeLists.txt", "content": "find_library(bullet_dynamics_lib bulletdynamics paths ${bullet_library_local_dir} $env{bullet_library_dir})"}, {"filenames": ["bulletsoftbody"], "version": "", "fromfile": "hkrn@@MMDAI/libvpvl/CMakeLists.txt", "content": "find_library(bullet_softbody_lib bulletsoftbody paths ${bullet_library_local_dir} $env{bullet_library_dir})"}, {"filenames": ["linearmath"], "version": "", "fromfile": "hkrn@@MMDAI/libvpvl/CMakeLists.txt", "content": "find_library(bullet_linearmath_lib linearmath paths ${bullet_library_local_dir} $env{bullet_library_dir})"}, {"filenames": ["assimp"], "version": "", "fromfile": "hkrn@@MMDAI/libvpvl/CMakeLists.txt", "content": "find_library(assimp_library assimp paths ${assimp_local_library_dir} $env{assimp_library_dir})"}, {"filenames": ["icuio"], "version": "", "fromfile": "hkrn@@MMDAI/libvpvl/CMakeLists.txt", "content": "find_library(icu_library_io icuio)"}, {"filenames": ["icuuc"], "version": "", "fromfile": "hkrn@@MMDAI/libvpvl/CMakeLists.txt", "content": "find_library(icu_library_uc icuuc)"}, {"filenames": ["iconv"], "version": "", "fromfile": "hkrn@@MMDAI/libvpvl/CMakeLists.txt", "content": "find_library(iconv_library iconv)"}, {"filenames": ["cg"], "version": "", "fromfile": "hkrn@@MMDAI/libvpvl/CMakeLists.txt", "content": "find_library(cg_library cg)"}, {"filenames": ["opencl"], "version": "", "fromfile": "hkrn@@MMDAI/libvpvl/CMakeLists.txt", "content": "find_library(opencl_library opencl)"}]}, {"deps": [{"depname": "libvpvl2", "version": null, "version_op": null, "unified_name": "vpvl2", "extractor_type": "cmake", "context": "project(libvpvl2)", "confidence": ""}], "type": "cmake", "libs": []}, {"deps": [{"depname": "openmp", "version": null, "version_op": null, "unified_name": "openmp", "extractor_type": "cmake", "context": "find_package(openmp)", "confidence": "High"}, {"depname": "opengl", "version": null, "version_op": null, "unified_name": "opengl", "extractor_type": "cmake", "context": "find_package(opengl required)", "confidence": "High"}, {"depname": "cg", "version": null, "version_op": null, "unified_name": "cg", "extractor_type": "cmake", "context": "find_package(cg required)", "confidence": "High"}, {"depname": "x11", "version": null, "version_op": null, "unified_name": "x11", "extractor_type": "cmake", "context": "find_package(x11)", "confidence": "High"}, {"depname": "qt5core", "version": null, "version_op": null, "unified_name": "qt5core", "extractor_type": "cmake", "context": "find_package(qt5core)", "confidence": "High"}, {"depname": "x11", "version": null, "version_op": null, "unified_name": "x11", "extractor_type": "cmake", "context": "find_package(x11)", "confidence": "High"}], "type": "cmake", "libs": [{"filenames": ["linearmath"], "version": "", "fromfile": "hkrn@@MMDAI/libvpvl2/cmake/vpvl2.cmake", "content": "find_library(bullet_linearmath_lib names linearmath path_suffixes lib64 lib32 lib paths ${bullet_install_dir} no_default_path no_cmake_find_root_path)"}, {"filenames": ["bulletcollision"], "version": "", "fromfile": "hkrn@@MMDAI/libvpvl2/cmake/vpvl2.cmake", "content": "find_library(bullet_collision_lib names bulletcollision path_suffixes lib64 lib32 lib paths ${bullet_install_dir} no_default_path no_cmake_find_root_path)"}, {"filenames": ["bulletdynamics"], "version": "", "fromfile": "hkrn@@MMDAI/libvpvl2/cmake/vpvl2.cmake", "content": "find_library(bullet_dynamics_lib names bulletdynamics path_suffixes lib64 lib32 lib paths ${bullet_install_dir} no_default_path no_cmake_find_root_path)"}, {"filenames": ["bulletsoftbody"], "version": "", "fromfile": "hkrn@@MMDAI/libvpvl2/cmake/vpvl2.cmake", "content": "find_library(bullet_softbody_lib names bulletsoftbody path_suffixes lib64 lib32 lib paths ${bullet_install_dir} no_default_path no_cmake_find_root_path)"}, {"filenames": ["assimp", "assimpd", "assimpd"], "version": "", "fromfile": "hkrn@@MMDAI/libvpvl2/cmake/vpvl2.cmake", "content": "find_library(assimp_library names assimp assimpd assimpd path_suffixes lib64 lib32 lib paths ${assimp_install_dir} no_default_path no_cmake_find_root_path)"}, {"filenames": ["assimp"], "version": "", "fromfile": "hkrn@@MMDAI/libvpvl2/cmake/vpvl2.cmake", "content": "find_library(assimp_library names assimp path_suffixes lib64 lib32 lib paths ${assimp_install_dir} no_default_path no_cmake_find_root_path)"}, {"filenames": ["vpvl"], "version": "", "fromfile": "hkrn@@MMDAI/libvpvl2/cmake/vpvl2.cmake", "content": "find_library(vpvl_library names vpvl path_suffixes lib64 lib32 lib paths ${vpvl_install_dir} no_default_path no_cmake_find_root_path)"}, {"filenames": ["icudata", "icudt"], "version": "", "fromfile": "hkrn@@MMDAI/libvpvl2/cmake/vpvl2.cmake", "content": "find_library(icu_library_data names icudata icudt path_suffixes lib64 lib32 lib paths ${icu_install_dir} no_default_path no_cmake_find_root_path)"}, {"filenames": ["icui18n", "icuin"], "version": "", "fromfile": "hkrn@@MMDAI/libvpvl2/cmake/vpvl2.cmake", "content": "find_library(icu_library_i18n names icui18n icuin path_suffixes lib64 lib32 lib paths ${icu_install_dir} no_default_path no_cmake_find_root_path)"}, {"filenames": ["icuuc"], "version": "", "fromfile": "hkrn@@MMDAI/libvpvl2/cmake/vpvl2.cmake", "content": "find_library(icu_library_uc names icuuc path_suffixes lib64 lib32 lib paths ${icu_install_dir} no_default_path no_cmake_find_root_path)"}, {"filenames": ["tbb_debug"], "version": "", "fromfile": "hkrn@@MMDAI/libvpvl2/cmake/vpvl2.cmake", "content": "find_library(tbb_library names tbb_debug path_suffixes lib paths ${tbb_source_directory} no_default_path no_cmake_find_root_path)"}, {"filenames": ["tbbproxy_debug"], "version": "", "fromfile": "hkrn@@MMDAI/libvpvl2/cmake/vpvl2.cmake", "content": "find_library(tbb_proxy_library names tbbproxy_debug path_suffixes lib paths ${tbb_source_directory} no_default_path no_cmake_find_root_path)"}, {"filenames": ["tbbmalloc_debug"], "version": "", "fromfile": "hkrn@@MMDAI/libvpvl2/cmake/vpvl2.cmake", "content": "find_library(tbb_malloc_library names tbbmalloc_debug path_suffixes lib paths ${tbb_source_directory} no_default_path no_cmake_find_root_path)"}, {"filenames": ["tbbmalloc_proxy_debug"], "version": "", "fromfile": "hkrn@@MMDAI/libvpvl2/cmake/vpvl2.cmake", "content": "find_library(tbb_malloc_proxy_library names tbbmalloc_proxy_debug path_suffixes lib paths ${tbb_source_directory} no_default_path no_cmake_find_root_path)"}, {"filenames": ["tbb", "tbb_debug"], "version": "", "fromfile": "hkrn@@MMDAI/libvpvl2/cmake/vpvl2.cmake", "content": "find_library(tbb_library names tbb tbb_debug paths \"${tbb_source_directory}/build/${tbb_build_prefix}_${cmake_build_type_tolower}\" no_default_path no_cmake_find_root_path)"}, {"filenames": ["zlibstatic", "zlibstaticd", "z"], "version": "", "fromfile": "hkrn@@MMDAI/libvpvl2/cmake/vpvl2.cmake", "content": "find_library(zlib_library names zlibstatic zlibstaticd z path_suffixes lib64 lib32 lib paths ${zlib_install_dir} no_default_path no_cmake_find_root_path)"}, {"filenames": ["xml2", "libxml2_a", "libxml2"], "version": "", "fromfile": "hkrn@@MMDAI/libvpvl2/cmake/vpvl2.cmake", "content": "find_library(libxml2_library names xml2 libxml2_a libxml2 path_suffixes lib64 lib32 lib paths ${libxml2_install_dir} no_default_path no_cmake_find_root_path)"}, {"filenames": ["openal32", "openal"], "version": "", "fromfile": "hkrn@@MMDAI/libvpvl2/cmake/vpvl2.cmake", "content": "find_library(alsoft_library names openal32 openal path_suffixes lib64 lib32 lib paths ${alsoft_install_dir} no_default_path no_cmake_find_root_path)"}, {"filenames": ["alure32-static", "alure-static", "alure32", "alure"], "version": "", "fromfile": "hkrn@@MMDAI/libvpvl2/cmake/vpvl2.cmake", "content": "find_library(alure_library names alure32-static alure-static alure32 alure path_suffixes lib64 lib32 lib paths ${alure_install_dir} no_default_path no_cmake_find_root_path)"}, {"filenames": ["mesa"], "version": "", "fromfile": "hkrn@@MMDAI/libvpvl2/cmake/vpvl2.cmake", "content": "find_library(mesa3d_mesa_library names mesa path_suffixes \"embed-darwin-x86_64/mesa\" \"darwin-x86_64/mesa\" paths \"${mesa3d_source_dir}/build\" no_default_path no_cmake_find_root_path)"}, {"filenames": ["osmesa"], "version": "", "fromfile": "hkrn@@MMDAI/libvpvl2/cmake/vpvl2.cmake", "content": "find_library(mesa3d_osmesa_library names osmesa path_suffixes \"embed-darwin-x86_64/mesa/drivers/osmesa\" \"darwin-x86_64/mesa/drivers/osmesa\" paths \"${mesa3d_source_dir}/build\" no_default_path no_cmake_find_root_path)"}, {"filenames": ["ppapi_gles2", "libglesv2", "glesv2"], "version": "", "fromfile": "hkrn@@MMDAI/libvpvl2/cmake/vpvl2.cmake", "content": "find_library(opengl_gl_library names ppapi_gles2 libglesv2 glesv2 paths $env{qtsdk_toolchain}/lib)"}, {"filenames": ["opencl"], "version": "", "fromfile": "hkrn@@MMDAI/libvpvl2/cmake/vpvl2.cmake", "content": "find_library(opencl_library names opencl)"}, {"filenames": ["libglog_static"], "version": "", "fromfile": "hkrn@@MMDAI/libvpvl2/cmake/vpvl2.cmake", "content": "find_library(glog_library names libglog_static path_suffixes ${cmake_build_type} paths ${glog_install_dir} no_default_path no_cmake_find_root_path)"}, {"filenames": ["glog"], "version": "", "fromfile": "hkrn@@MMDAI/libvpvl2/cmake/vpvl2.cmake", "content": "find_library(glog_library names glog path_suffixes lib64 lib32 lib paths ${glog_install_dir} no_default_path no_cmake_find_root_path)"}, {"filenames": ["libhlslcc"], "version": "", "fromfile": "hkrn@@MMDAI/libvpvl2/cmake/vpvl2.cmake", "content": "find_library(hlslxc_library names libhlslcc path_suffixes lib paths ${hlslxc_src_dir} no_default_path no_cmake_find_root_path)"}, {"filenames": ["regal32"], "version": "", "fromfile": "hkrn@@MMDAI/libvpvl2/cmake/vpvl2.cmake", "content": "find_library(regal_library names regal32 paths ${regal_install_dir}/build/win32/vs2010/regal/${cmake_build_type}/win32 no_default_path no_cmake_find_root_path)"}, {"filenames": ["regal"], "version": "", "fromfile": "hkrn@@MMDAI/libvpvl2/cmake/vpvl2.cmake", "content": "find_library(regal_library names regal path_suffixes lib/darwin paths ${regal_install_dir} no_default_path no_cmake_find_root_path)"}, {"filenames": ["regal"], "version": "", "fromfile": "hkrn@@MMDAI/libvpvl2/cmake/vpvl2.cmake", "content": "find_library(regal_library names regal path_suffixes lib/linux paths ${regal_install_dir} no_default_path no_cmake_find_root_path)"}, {"filenames": ["regal"], "version": "", "fromfile": "hkrn@@MMDAI/libvpvl2/cmake/vpvl2.cmake", "content": "find_library(regal_library names regal path_suffixes lib64 lib32 lib paths ${regal_install_dir} no_default_path no_cmake_find_root_path)"}, {"filenames": ["fxlib64", "fxlib64d", "fxlib", "fxlibd"], "version": "", "fromfile": "hkrn@@MMDAI/libvpvl2/cmake/vpvl2.cmake", "content": "find_library(nvfx_fxlib_library names fxlib64 fxlib64d fxlib fxlibd path_suffixes lib64 lib32 lib paths ${nvfx_install_dir} no_default_path no_cmake_find_root_path)"}, {"filenames": ["fxlibgl64", "fxlibgl64d", "fxlibgl", "fxlibgld"], "version": "", "fromfile": "hkrn@@MMDAI/libvpvl2/cmake/vpvl2.cmake", "content": "find_library(nvfx_fxlibgl_library names fxlibgl64 fxlibgl64d fxlibgl fxlibgld path_suffixes lib64 lib32 lib paths ${nvfx_install_dir} no_default_path no_cmake_find_root_path)"}, {"filenames": ["fxparser64", "fxparser64d", "fxparser", "fxparserd"], "version": "", "fromfile": "hkrn@@MMDAI/libvpvl2/cmake/vpvl2.cmake", "content": "find_library(nvfx_fxparser_library names fxparser64 fxparser64d fxparser fxparserd path_suffixes lib64 lib32 lib paths ${nvfx_install_dir} no_default_path no_cmake_find_root_path)"}, {"filenames": ["cocoa"], "version": "", "fromfile": "hkrn@@MMDAI/libvpvl2/cmake/vpvl2.cmake", "content": "find_library(cocoa_framework names cocoa)"}, {"filenames": ["anttweakbar"], "version": "", "fromfile": "hkrn@@MMDAI/libvpvl2/cmake/vpvl2.cmake", "content": "find_library(atb_library names anttweakbar path_suffixes lib64 lib32 lib paths ${atb_install_dir} no_default_path no_cmake_find_root_path)"}, {"filenames": ["freeimage", "path_suffixeslib", "lib64", "lib32"], "version": "", "fromfile": "hkrn@@MMDAI/libvpvl2/cmake/vpvl2.cmake", "content": "find_library(freeimage_library names freeimage path_suffixeslib lib64 lib32 )"}, {"filenames": ["glsl_optimizer"], "version": "", "fromfile": "hkrn@@MMDAI/libvpvl2/cmake/vpvl2.cmake", "content": "find_library(glslopt_library glsl_optimizer path_suffixes ${glslopt_build_dir} paths ${glslopt_source_dir} no_default_path)"}, {"filenames": ["glcpp-library"], "version": "", "fromfile": "hkrn@@MMDAI/libvpvl2/cmake/vpvl2.cmake", "content": "find_library(glslopt_glcpp_library glcpp-library path_suffixes ${glslopt_build_dir} paths ${glslopt_source_dir} no_default_path)"}, {"filenames": ["mesa"], "version": "", "fromfile": "hkrn@@MMDAI/libvpvl2/cmake/vpvl2.cmake", "content": "find_library(glslopt_mesa_library mesa path_suffixes ${glslopt_build_dir} paths ${glslopt_source_dir} no_default_path)"}, {"filenames": ["sdl2"], "version": "", "fromfile": "hkrn@@MMDAI/libvpvl2/cmake/vpvl2.cmake", "content": "find_library(sdl_library names sdl2 path_suffixes lib paths ${sdl_install_dir} no_default_path no_cmake_find_root_path)"}, {"filenames": ["sdl2main"], "version": "", "fromfile": "hkrn@@MMDAI/libvpvl2/cmake/vpvl2.cmake", "content": "find_library(sdl_main_library names sdl2main path_suffixes lib paths ${sdl_install_dir} no_default_path no_cmake_find_root_path)"}, {"filenames": ["winmm"], "version": "", "fromfile": "hkrn@@MMDAI/libvpvl2/cmake/vpvl2.cmake", "content": "find_library(win32_winmm_library names winmm)"}, {"filenames": ["version"], "version": "", "fromfile": "hkrn@@MMDAI/libvpvl2/cmake/vpvl2.cmake", "content": "find_library(win32_version_library names version)"}, {"filenames": ["imm32"], "version": "", "fromfile": "hkrn@@MMDAI/libvpvl2/cmake/vpvl2.cmake", "content": "find_library(win32_imm_library names imm32)"}, {"filenames": ["glfw3", "glfw"], "version": "", "fromfile": "hkrn@@MMDAI/libvpvl2/cmake/vpvl2.cmake", "content": "find_library(glfw_library names glfw3 glfw path_suffixes lib64 lib32 lib paths ${glfw_install_dir} no_default_path no_cmake_find_root_path)"}, {"filenames": ["cocoa"], "version": "", "fromfile": "hkrn@@MMDAI/libvpvl2/cmake/vpvl2.cmake", "content": "find_library(cocoa_library names cocoa)"}, {"filenames": ["iokit"], "version": "", "fromfile": "hkrn@@MMDAI/libvpvl2/cmake/vpvl2.cmake", "content": "find_library(iokit_library names iokit)"}, {"filenames": ["corefoundation"], "version": "", "fromfile": "hkrn@@MMDAI/libvpvl2/cmake/vpvl2.cmake", "content": "find_library(corefoundation_library names corefoundation)"}, {"filenames": ["sfml-graphicss-s", "sfml-graphics", "sfml-graphics-s-d", "sfml-graphics-d"], "version": "", "fromfile": "hkrn@@MMDAI/libvpvl2/cmake/vpvl2.cmake", "content": "find_library(sfml2_graphics_library names sfml-graphicss-s sfml-graphics sfml-graphics-s-d sfml-graphics-d path_suffixes lib64 lib32 lib paths ${sfml2_install_dir} no_default_path no_cmake_find_root_path)"}, {"filenames": ["sfml-system-s", "sfml-system", "sfml-system-s-d", "sfml-system-d"], "version": "", "fromfile": "hkrn@@MMDAI/libvpvl2/cmake/vpvl2.cmake", "content": "find_library(sfml2_system_library names sfml-system-s sfml-system sfml-system-s-d sfml-system-d path_suffixes lib64 lib32 lib paths ${sfml2_install_dir} no_default_path no_cmake_find_root_path)"}, {"filenames": ["sfml-window-s", "sfml-window", "sfml-window-s-d", "sfml-window-d"], "version": "", "fromfile": "hkrn@@MMDAI/libvpvl2/cmake/vpvl2.cmake", "content": "find_library(sfml2_window_library names sfml-window-s sfml-window sfml-window-s-d sfml-window-d path_suffixes lib64 lib32 lib paths ${sfml2_install_dir} no_default_path no_cmake_find_root_path)"}, {"filenames": ["corefoundation"], "version": "", "fromfile": "hkrn@@MMDAI/libvpvl2/cmake/vpvl2.cmake", "content": "find_library(corefoundation_framework names corefoundation)"}, {"filenames": ["allegro-static", "allegro", "allegro-debug-static", "allegro-debug"], "version": "", "fromfile": "hkrn@@MMDAI/libvpvl2/cmake/vpvl2.cmake", "content": "find_library(allegro_library names allegro-static allegro allegro-debug-static allegro-debug path_suffixes lib64 lib32 lib paths ${allegro_install_dir} no_default_path no_cmake_find_root_path)"}, {"filenames": ["allegro_main-static", "allegro_main", "allegro_main-debug-static", "allegro_main-debug"], "version": "", "fromfile": "hkrn@@MMDAI/libvpvl2/cmake/vpvl2.cmake", "content": "find_library(allegro_main_library names allegro_main-static allegro_main allegro_main-debug-static allegro_main-debug path_suffixes lib64 lib32 lib paths ${allegro_install_dir} no_default_path no_cmake_find_root_path)"}, {"filenames": ["iokit"], "version": "", "fromfile": "hkrn@@MMDAI/libvpvl2/cmake/vpvl2.cmake", "content": "find_library(iokit_framework names iokit)"}, {"filenames": ["egl", "libegl"], "version": "", "fromfile": "hkrn@@MMDAI/libvpvl2/cmake/vpvl2.cmake", "content": "find_library(egl_library names egl libegl paths $env{qtsdk_toolchain}/lib)"}, {"filenames": ["bcm_host"], "version": "", "fromfile": "hkrn@@MMDAI/libvpvl2/cmake/vpvl2.cmake", "content": "find_library(bcm_host_library names bcm_host)"}, {"filenames": ["vcos"], "version": "", "fromfile": "hkrn@@MMDAI/libvpvl2/cmake/vpvl2.cmake", "content": "find_library(vcos_library names vcos)"}, {"filenames": ["vchiq_arm"], "version": "", "fromfile": "hkrn@@MMDAI/libvpvl2/cmake/vpvl2.cmake", "content": "find_library(vchiq_arm_library names vchiq_arm)"}]}, {"deps": [{"depname": "cg", "version": null, "version_op": null, "unified_name": "cg", "extractor_type": "cmake", "context": "hkrn@@MMDAI/libvpvl2/cmake/FindCg.cmake", "confidence": "High"}], "type": "cmake", "libs": [{"filenames": ["cg"], "version": "", "fromfile": "hkrn@@MMDAI/libvpvl2/cmake/FindCg.cmake", "content": "find_library( cg_library\n        names cg\n        paths\n        $env{cg_lib64_path}\n        $env{programfiles}/nvidia\\ corporation/cg/lib.x64\n\t\t$env{pfx86}/nvidia\\ corporation/cg/lib.x64\n        $env{programfiles}/cg\n        $env{pfx86}/cg\n        ${project_source_dir}/../cg\n        ../lib.x64\n        .\n        doc \"the cg runtime library (64-bit)\"\n        )"}, {"filenames": ["cggl"], "version": "", "fromfile": "hkrn@@MMDAI/libvpvl2/cmake/FindCg.cmake", "content": "find_library( cg_gl_library\n        names cggl\n        paths\n\t\t$env{cg_lib64_path}\n        $env{programfiles}/nvidia\\ corporation/cg/lib.x64\n\t\t$env{pfx86}/nvidia\\ corporation/cg/lib.x64\n        $env{programfiles}/cg\n\t\t$env{pfx86}/cg\n        ${project_source_dir}/../cg\n        ../lib.x64\n        .\n        doc \"the cg gl runtime library (64-bit)\"\n        )"}, {"filenames": ["cg"], "version": "", "fromfile": "hkrn@@MMDAI/libvpvl2/cmake/FindCg.cmake", "content": "find_library( cg_library\n        names cg\n        paths\n        $env{cg_lib_path}\n        $env{programfiles}/nvidia\\ corporation/cg/lib\n        $env{programfiles}/cg\n        ${project_source_dir}/../cg\n        ../lib\n        .\n        doc \"the cg runtime library\"\n        )"}, {"filenames": ["cggl"], "version": "", "fromfile": "hkrn@@MMDAI/libvpvl2/cmake/FindCg.cmake", "content": "find_library( cg_gl_library\n        names cggl\n        paths\n\t\t$env{cg_lib_path}\n        $env{programfiles}/nvidia\\ corporation/cg/lib\n        $env{programfiles}/cg\n        ${project_source_dir}/../cg\n        ../lib\n        .\n        doc \"the cg gl runtime library\"\n        )"}, {"filenames": ["cg"], "version": "", "fromfile": "hkrn@@MMDAI/libvpvl2/cmake/FindCg.cmake", "content": "find_library( cg_library cg\n      paths\n      /usr/lib64\n      /usr/lib\n      /usr/local/lib64\n      /usr/local/lib\n      ../lib64\n      ../lib\n      doc \"the cg runtime library\"\n      )"}, {"filenames": ["cggl"], "version": "", "fromfile": "hkrn@@MMDAI/libvpvl2/cmake/FindCg.cmake", "content": "find_library( cg_gl_library cggl\n      paths\n      /usr/lib64\n      /usr/lib\n      /usr/local/lib64\n      /usr/local/lib\n      ../lib64\n      ../lib\n      doc \"the cg runtime library\"\n      )"}, {"filenames": ["cgc"], "version": "", "fromfile": "hkrn@@MMDAI/libvpvl2/cmake/FindCg.cmake", "content": "find_program(cg_compiler cgc\n    /usr/bin\n    /usr/local/bin\n    doc \"the cg compiler\"\n    )"}, {"filenames": ["cgc"], "version": "", "fromfile": "hkrn@@MMDAI/libvpvl2/cmake/FindCg.cmake", "content": "find_program( cg_compiler cgc\n      $env{cg_bin64_path}\n\t  $env{cg_bin_path}\n      $env{programfiles}/nvidia\\ corporation/cg/bin\n\t  $env{pfx86}/nvidia\\ corporation/cg/bin\n      $env{programfiles}/cg\n      ${project_source_dir}/../cg\n      doc \"the cg compiler\"\n    )"}, {"filenames": ["cgc"], "version": "", "fromfile": "hkrn@@MMDAI/libvpvl2/cmake/FindCg.cmake", "content": "find_program( cg_compiler cgc\n      /usr/bin\n      /usr/local/bin\n      doc \"the cg compiler\"\n      )"}]}, {"deps": [{"depname": "tbb", "version": null, "version_op": null, "unified_name": "tbb", "extractor_type": "cmake", "context": "hkrn@@MMDAI/libvpvl2/cmake/FindTBB.cmake", "confidence": "High"}, {"depname": "tbb_interface", "version": "0", "version_op": null, "unified_name": "tbb_interface", "extractor_type": "cmake", "context": "\tset(tbb_interface_version 0)", "confidence": "Low"}, {"depname": "tbb_interface", "version": null, "version_op": null, "unified_name": "tbb_interface", "extractor_type": "cmake", "context": "\tset(tbb_interface_version \"${tbb_interface_version}\")", "confidence": "Low"}], "type": "cmake", "libs": [{"filenames": ["tbb"], "version": "", "fromfile": "hkrn@@MMDAI/libvpvl2/cmake/FindTBB.cmake", "content": "find_library(tbb_library tbb hints ${_tbb_library_dir}\n        paths env library_path env ld_library_path)"}, {"filenames": ["tbbmalloc"], "version": "", "fromfile": "hkrn@@MMDAI/libvpvl2/cmake/FindTBB.cmake", "content": "find_library(tbb_malloc_library tbbmalloc hints ${_tbb_library_dir}\n        paths env library_path env ld_library_path)"}, {"filenames": ["tbb_debug"], "version": "", "fromfile": "hkrn@@MMDAI/libvpvl2/cmake/FindTBB.cmake", "content": "find_library(tbb_library_debug tbb_debug hints ${_tbb_library_dir}\n        paths env library_path env ld_library_path)"}, {"filenames": ["tbbmalloc_debug"], "version": "", "fromfile": "hkrn@@MMDAI/libvpvl2/cmake/FindTBB.cmake", "content": "find_library(tbb_malloc_library_debug tbbmalloc_debug hints ${_tbb_library_dir}\n        paths env library_path env ld_library_path)"}]}]}