{"target": "lisitsyn@@tapkee", "extractors": [{"deps": [], "type": "make"}, {"deps": [{"depname": "eigen3", "version": null, "version_op": null, "unified_name": "eigen3", "extractor_type": "cmake", "context": "find_package(eigen3 required)", "confidence": "High"}, {"depname": "fmt", "version": null, "version_op": null, "unified_name": "fmt", "extractor_type": "cmake", "context": "find_package(fmt required)", "confidence": "High"}, {"depname": "arpack", "version": null, "version_op": null, "unified_name": "arpack", "extractor_type": "cmake", "context": "find_package(arpack)", "confidence": "High"}, {"depname": "openmp", "version": null, "version_op": null, "unified_name": "openmp", "extractor_type": "cmake", "context": "find_package(openmp)", "confidence": "High"}, {"depname": "opencl", "version": null, "version_op": null, "unified_name": "opencl", "extractor_type": "cmake", "context": "find_package(opencl)", "confidence": "High"}, {"depname": "viennacl", "version": null, "version_op": null, "unified_name": "viennacl", "extractor_type": "cmake", "context": "find_package(viennacl)", "confidence": "High"}, {"depname": "gtest", "version": null, "version_op": null, "unified_name": "gtest", "extractor_type": "cmake", "context": "find_package(gtest required)", "confidence": "High"}, {"depname": "tapkee", "version": null, "version_op": null, "unified_name": "tapkee", "extractor_type": "cmake", "context": "project (tapkee  languages cxx)", "confidence": ""}], "type": "cmake", "libs": []}, {"deps": [{"depname": "examples", "version": null, "version_op": null, "unified_name": "examples", "extractor_type": "cmake", "context": "project(examples)", "confidence": ""}], "type": "cmake", "libs": []}, {"deps": [{"depname": "rna", "version": null, "version_op": null, "unified_name": "rna", "extractor_type": "cmake", "context": "project (rna)", "confidence": ""}], "type": "cmake", "libs": []}, {"deps": [{"depname": "minimal", "version": null, "version_op": null, "unified_name": "minimal", "extractor_type": "cmake", "context": "project (minimal)", "confidence": ""}], "type": "cmake", "libs": []}, {"deps": [{"depname": "precomputed", "version": null, "version_op": null, "unified_name": "precomputed", "extractor_type": "cmake", "context": "project (precomputed)", "confidence": ""}], "type": "cmake", "libs": []}, {"deps": [{"depname": "feast", "version": null, "version_op": null, "unified_name": "feast", "extractor_type": "cmake", "context": "lisitsyn@@tapkee/src/cmake/FindFeast.cmake", "confidence": "High"}], "type": "cmake", "libs": [{"filenames": ["pfeast", "feast"], "version": "", "fromfile": "lisitsyn@@tapkee/src/cmake/FindFeast.cmake", "content": "find_library(feast_lib names pfeast feast paths ${feast_dir})"}]}, {"deps": [{"depname": "arpack", "version": null, "version_op": null, "unified_name": "arpack", "extractor_type": "cmake", "context": "lisitsyn@@tapkee/src/cmake/FindArpack.cmake", "confidence": "High"}], "type": "cmake", "libs": [{"filenames": ["parpack", "arpack"], "version": "", "fromfile": "lisitsyn@@tapkee/src/cmake/FindArpack.cmake", "content": "find_library(arpack_lib names parpack arpack paths ${arpack_dir})"}]}, {"deps": [{"depname": "eigen3", "version": null, "version_op": null, "unified_name": "eigen3", "extractor_type": "cmake", "context": "lisitsyn@@tapkee/src/cmake/FindEigen3.cmake", "confidence": "High"}, {"depname": "eigen3_find", "version": "2.91.0", "version_op": null, "unified_name": "eigen3", "extractor_type": "cmake", "context": "\n  set(eigen3_find_version \"2.91.0\")", "confidence": "Low"}, {"depname": "eigen3_world", "version": "1", "version_op": null, "unified_name": "eigen3_world", "extractor_type": "cmake", "context": "  set(eigen3_world_version \"${cmake_match_1}\")", "confidence": "Low"}, {"depname": "eigen3_major", "version": "1", "version_op": null, "unified_name": "eigen3", "extractor_type": "cmake", "context": "  set(eigen3_major_version \"${cmake_match_1}\")", "confidence": "Low"}, {"depname": "eigen3_minor", "version": "1", "version_op": null, "unified_name": "eigen3", "extractor_type": "cmake", "context": "  set(eigen3_minor_version \"${cmake_match_1}\")", "confidence": "Low"}, {"depname": "eigen3", "version": null, "version_op": null, "unified_name": "eigen3", "extractor_type": "cmake", "context": "\n  set(eigen3_version ${cmake_match_1}.${cmake_match_1}.${cmake_match_1})", "confidence": "Low"}], "type": "cmake", "libs": []}, {"deps": [{"depname": "opencl", "version": null, "version_op": null, "unified_name": "opencl", "extractor_type": "cmake", "context": "lisitsyn@@tapkee/src/cmake/FindOpenCL.cmake", "confidence": "High"}, {"depname": "packagehandlestandardargs", "version": null, "version_op": null, "unified_name": "packagehandlestandardargs", "extractor_type": "cmake", "context": "find_package( packagehandlestandardargs )", "confidence": "High"}], "type": "cmake", "libs": [{"filenames": ["opencl"], "version": "", "fromfile": "lisitsyn@@tapkee/src/cmake/FindOpenCL.cmake", "content": "find_library(opencl_libraries opencl doc \"opencl lib for osx\")"}, {"filenames": ["opencl.lib"], "version": "", "fromfile": "lisitsyn@@tapkee/src/cmake/FindOpenCL.cmake", "content": "find_library(opencl_libraries opencl.lib ${opencl_lib_dir} $env{cuda_lib_path} $env{cuda_path}/lib/x64)"}, {"filenames": ["opencl.lib"], "version": "", "fromfile": "lisitsyn@@tapkee/src/cmake/FindOpenCL.cmake", "content": "find_library(opencl_libraries opencl.lib ${opencl_lib_dir} $env{cuda_lib_path} $env{cuda_path}/lib/win32)"}, {"filenames": ["opencl"], "version": "", "fromfile": "lisitsyn@@tapkee/src/cmake/FindOpenCL.cmake", "content": "find_library(opencl_libraries opencl\n              env ld_library_path\n            )"}]}, {"deps": [{"depname": "viennacl", "version": null, "version_op": null, "unified_name": "viennacl", "extractor_type": "cmake", "context": "lisitsyn@@tapkee/src/cmake/FindViennaCL.cmake", "confidence": "High"}, {"depname": "opencl", "version": null, "version_op": null, "unified_name": "opencl", "extractor_type": "cmake", "context": "find_package(opencl required)", "confidence": "High"}], "type": "cmake", "libs": []}]}