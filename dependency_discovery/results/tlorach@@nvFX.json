{"target": "tlorach@@nvFX", "extractors": [{"deps": [{"depname": "bison", "version": null, "version_op": null, "unified_name": "bison", "extractor_type": "cmake", "context": "find_package(bison)", "confidence": "High"}, {"depname": "flex", "version": null, "version_op": null, "unified_name": "flex", "extractor_type": "cmake", "context": "find_package(flex)", "confidence": "High"}, {"depname": "dxsdk", "version": null, "version_op": null, "unified_name": "dxsdk", "extractor_type": "cmake", "context": "find_package(dxsdk module)", "confidence": "High"}, {"depname": "opengl", "version": null, "version_op": null, "unified_name": "opengl", "extractor_type": "cmake", "context": "find_package(opengl)", "confidence": "High"}, {"depname": "glut", "version": null, "version_op": null, "unified_name": "glut", "extractor_type": "cmake", "context": "find_package(glut)", "confidence": "High"}, {"depname": "glew", "version": null, "version_op": null, "unified_name": "glew", "extractor_type": "cmake", "context": "find_package(glew required)", "confidence": "High"}, {"depname": "optix", "version": null, "version_op": null, "unified_name": "optix", "extractor_type": "cmake", "context": "find_package(optix)", "confidence": "High"}, {"depname": "cuda", "version": null, "version_op": null, "unified_name": "cuda", "extractor_type": "cmake", "context": "find_package(cuda)", "confidence": "High"}, {"depname": "nvfx", "version": "1.2.0", "version_op": null, "unified_name": "nvfx", "extractor_type": "cmake", "context": "project( nvfx )", "confidence": ""}], "type": "cmake", "libs": []}, {"deps": [{"depname": "zlib", "version": null, "version_op": null, "unified_name": "zlib", "extractor_type": "cmake", "context": "tlorach@@nvFX/cmake/FindZLib.cmake", "confidence": "High"}, {"depname": "zlib_major", "version": null, "version_op": null, "unified_name": "zlib", "extractor_type": "cmake", "context": "\n    set(zlib_major_version \"${zlib_version_major}\")", "confidence": "Low"}, {"depname": "zlib_minor", "version": null, "version_op": null, "unified_name": "zlib", "extractor_type": "cmake", "context": "    set(zlib_minor_version \"${zlib_version_minor}\")", "confidence": "Low"}, {"depname": "zlib_patch", "version": null, "version_op": null, "unified_name": "zlib", "extractor_type": "cmake", "context": "    set(zlib_patch_version \"${zlib_version_patch}\")", "confidence": "Low"}], "type": "cmake", "libs": [{"filenames": ["${zlib_names}", "${${search}}"], "version": "", "fromfile": "tlorach@@nvFX/cmake/FindZLib.cmake", "content": "find_library(zlib_library  names ${zlib_names} ${${search}} path_suffixes lib lib32)"}, {"filenames": ["${zlib_names}", "${${search}}"], "version": "", "fromfile": "tlorach@@nvFX/cmake/FindZLib.cmake", "content": "find_library(zlib_library  names ${zlib_names} ${${search}} path_suffixes lib lib64)"}, {"filenames": ["zlib.dll", "zlibd.dll", "${${search}}"], "version": "", "fromfile": "tlorach@@nvFX/cmake/FindZLib.cmake", "content": "find_program(zlib_bin  names zlib.dll zlibd.dll ${${search}} path_suffixes bin bin32)"}, {"filenames": ["zlib.dll", "zlibd.dll", "${${search}}"], "version": "", "fromfile": "tlorach@@nvFX/cmake/FindZLib.cmake", "content": "find_program(zlib_bin  names zlib.dll zlibd.dll ${${search}} path_suffixes bin bin64)"}]}, {"deps": [{"depname": "glut", "version": null, "version_op": null, "unified_name": "glut", "extractor_type": "cmake", "context": "tlorach@@nvFX/cmake/FindGLUT.cmake", "confidence": "High"}], "type": "cmake", "libs": [{"filenames": ["glut32"], "version": "", "fromfile": "tlorach@@nvFX/cmake/FindGLUT.cmake", "content": "find_library( glut_glut_library glut32 freeglut_static freeglut\n            ${glut_location}/lib\n            ${glut_location}/lib/win32\n            ${glut_location}/lib/x86\n            $env{glut_location}/lib\n            ${glut_location}/lib/glut\n            $env{glut_location}/lib/glut\n            $env{glut_location}/lib/win32\n            $env{glut_location}/lib/x86\n            ${opengl_library_dir}\n            /usr/lib\n            /usr/lib/w32api\n            /usr/local/lib\n            /usr/x11r6/lib\n          )"}, {"filenames": ["glut32"], "version": "", "fromfile": "tlorach@@nvFX/cmake/FindGLUT.cmake", "content": "find_library( glut_glut_library glut32 freeglut_static freeglut\n            ${glut_location}/lib/x64\n            $env{glut_location}/lib/x64\n            ${glut_location}/lib\n            ${glut_location}/lib/glut\n            $env{glut_location}/lib\n            $env{glut_location}/lib/glut\n            ${opengl_library_dir}\n            /usr/lib\n            /usr/lib/w32api\n            /usr/local/lib\n            /usr/x11r6/lib\n          )"}, {"filenames": ["glut32", "glut32s", "glut", "freeglut_static", "freeglut"], "version": "", "fromfile": "tlorach@@nvFX/cmake/FindGLUT.cmake", "content": "find_library( glut_glut_library\n            names glut32 glut32s glut freeglut_static freeglut\n            paths\n            ${glut_location}/lib\n            ${glut_location}/lib/win32\n            ${glut_location}/lib/x86\n            $env{glut_location}/lib\n            $env{glut_location}/lib/win32\n            $env{glut_location}/lib/x86\n            ${glut_location}/lib/glut\n            $env{glut_location}/lib/glut\n            ${project_source_dir}/extern/glut/bin\n            ${project_source_dir}/extern/glut/lib\n            ${project_source_dir}/extern/glut/lib/win32\n            ${project_source_dir}/extern/glut/lib/x86\n            $env{programfiles}/glut/lib\n            $env{programfiles}/glut/lib/win32\n            $env{programfiles}/glut/lib/x86\n            ${opengl_library_dir}\n            doc \"the glut library\")"}, {"filenames": ["glut32", "glut32s", "glut", "freeglut_static", "freeglut"], "version": "", "fromfile": "tlorach@@nvFX/cmake/FindGLUT.cmake", "content": "find_library( glut_glut_library\n            names glut32 glut32s glut freeglut_static freeglut\n            paths\n            ${glut_location}/lib/x64\n            $env{glut_location}/lib/x64\n            ${project_source_dir}/extern/glut/lib/x64\n            $env{programfiles}/glut/lib/x64\n            ${glut_location}/lib\n            $env{glut_location}/lib\n            ${glut_location}/lib/glut\n            $env{glut_location}/lib/glut\n            ${project_source_dir}/extern/glut/bin\n            ${project_source_dir}/extern/glut/lib\n            $env{programfiles}/glut/lib\n            ${opengl_library_dir}\n            doc \"the glut library\")"}, {"filenames": ["glut"], "version": "", "fromfile": "tlorach@@nvFX/cmake/FindGLUT.cmake", "content": "find_library( glut_glut_library glut libglut\n            ${glut_location}/lib\n            $env{glut_location}/lib\n            ${glut_location}/lib/glut\n            $env{glut_location}/lib/glut\n            /usr/lib\n            /usr/local/lib\n            /usr/openwin/lib\n            /usr/x11r6/lib\n        )"}, {"filenames": ["x11"], "version": "", "fromfile": "tlorach@@nvFX/cmake/FindGLUT.cmake", "content": "find_library( glut_x11_library x11\n            ${glut_location}/lib\n            $env{glut_location}/lib\n            /usr/lib\n            /usr/local/lib\n            /usr/openwin/lib\n            /usr/x11r6/lib\n        )"}, {"filenames": ["xi"], "version": "", "fromfile": "tlorach@@nvFX/cmake/FindGLUT.cmake", "content": "find_library( glut_xi_library xi\n            ${glut_location}/lib\n            $env{glut_location}/lib\n            /usr/lib\n            /usr/local/lib\n            /usr/openwin/lib\n            /usr/x11r6/lib\n        )"}, {"filenames": ["xmu"], "version": "", "fromfile": "tlorach@@nvFX/cmake/FindGLUT.cmake", "content": "find_library( glut_xmu_library xmu\n            ${glut_location}/lib\n            $env{glut_location}/lib\n            /usr/lib\n            /usr/local/lib\n            /usr/openwin/lib\n            /usr/x11r6/lib\n        )"}]}, {"deps": [{"depname": "glew", "version": null, "version_op": null, "unified_name": "glew", "extractor_type": "cmake", "context": "tlorach@@nvFX/cmake/FindGLEW.cmake", "confidence": "High"}], "type": "cmake", "libs": [{"filenames": ["glew", "glew", "glew32s", "glew32"], "version": "", "fromfile": "tlorach@@nvFX/cmake/FindGLEW.cmake", "content": "find_library( glew_library\n          names\n              glew glew glew32s glew32\n          paths\n              ${glew_location}/lib\n              ${glew_location}/lib/x86\n              ${glew_location}/lib/win32\n              ${glew_location}/lib/release/win32\n              ${glew_location}/lib/release mx/win32\n              $env{glew_location}/lib\n              $env{glew_location}/lib/release/win32\n              $env{glew_location}/lib/release mx/win32\n              $env{glew_location}/lib/x86\n              $env{glew_location}/lib/win32\n              $env{programfiles}/glew/lib\n              $env{programfiles}/glew/lib/x86\n              $env{programfiles}/glew/lib/win32\n              ${project_source_dir}/extern/glew/bin\n              ${project_source_dir}/extern/glew/lib\n              ${project_source_dir}/extern/glew/lib/x86\n              ${project_source_dir}/extern/glew/lib/win32\n              ${glew_location}\n              $env{glew_location}\n              doc \"the glew library\")"}, {"filenames": ["glew", "glew", "glew32s", "glew32"], "version": "", "fromfile": "tlorach@@nvFX/cmake/FindGLEW.cmake", "content": "find_library( glew_library\n          names\n              glew glew glew32s glew32\n          paths\n              ${glew_location}/lib/x64\n              ${glew_location}/lib/release/x64\n              ${glew_location}/lib/release mx/x64\n              $env{glew_location}/lib/x64\n              $env{glew_location}/lib/release/x64\n              $env{glew_location}/lib/release mx/x64\n              $env{programfiles}/glew/lib/x64\n              ${project_source_dir}/extern/glew/bin\n              ${project_source_dir}/extern/glew/lib/x64\n              ${glew_location}/lib\n              $env{glew_location}/lib\n              $env{programfiles}/glew/lib\n              ${project_source_dir}/extern/glew/lib\n              ${glew_location}\n              $env{glew_location}\n              doc \"the glew library\")"}, {"filenames": ["glew", "glew"], "version": "", "fromfile": "tlorach@@nvFX/cmake/FindGLEW.cmake", "content": "find_library( glew_library\n        names\n            glew glew\n        paths\n            ${glew_location}/lib\n            $env{glew_location}/lib\n            /usr/lib64\n            /usr/lib\n            /usr/local/lib64\n            /usr/local/lib\n            /sw/lib\n            /opt/local/lib\n            no_default_path\n            doc \"the glew library\")"}]}, {"deps": [{"depname": "dxsdk", "version": null, "version_op": null, "unified_name": "dxsdk", "extractor_type": "cmake", "context": "tlorach@@nvFX/cmake/FindDXSDK.cmake", "confidence": "High"}], "type": "cmake", "libs": [{"filenames": ["${dx_lib}.lib"], "version": "", "fromfile": "tlorach@@nvFX/cmake/FindDXSDK.cmake", "content": "find_library(dxsdk_${dx_lib}_library\n            names \n                ${dx_lib}.lib\n            paths\n                ${dxsdk_library_dir}\n        )"}]}, {"deps": [{"depname": "optix", "version": null, "version_op": null, "unified_name": "optix", "extractor_type": "cmake", "context": "tlorach@@nvFX/cmake/FindOPTIX.cmake", "confidence": "High"}], "type": "cmake", "libs": [{"filenames": ["optix.1"], "version": "", "fromfile": "tlorach@@nvFX/cmake/FindOPTIX.cmake", "content": "find_library( optix_library\n          names\n              optix.1\n          paths\n              ${optix_path}/lib\n              ${optix_path}/lib/x86\n              ${optix_path}/lib/win32\n              $env{optix_path}/lib\n              ${project_source_dir}/extern/optix/lib\n              ${project_source_dir}/extern/optix/lib/x86\n              ${project_source_dir}/extern/optix/lib/win32\n              ${optix_path}\n              $env{optix_path}\n              doc \"the optix library\")"}, {"filenames": ["optix.1"], "version": "", "fromfile": "tlorach@@nvFX/cmake/FindOPTIX.cmake", "content": "find_library( optix_library\n          names\n              optix.1\n          paths\n              ${optix_path}/lib64\n              $env{optix_path}/lib64\n              ${optix_install_dir}/lib64\n              $env{optix_install_dir}/lib64\n              ${project_source_dir}/extern/optix/lib64\n              ${project_source_dir}/extern/optix/lib/x64\n              doc \"the optix library\")"}, {"filenames": ["optix.1"], "version": "", "fromfile": "tlorach@@nvFX/cmake/FindOPTIX.cmake", "content": "find_library( optix_library\n        names\n            optix.1\n        paths\n            ${optix_path}/lib\n            $env{optix_path}/lib\n            ${optix_install_dir}/lib\n            $env{optix_install_dir}/lib\n            /usr/lib64\n            /usr/lib\n            /usr/local/lib64\n            /usr/local/lib\n            /sw/lib\n            /opt/local/lib\n            no_default_path\n            doc \"the optix library\")"}]}, {"deps": [{"depname": "svcmfcui", "version": null, "version_op": null, "unified_name": "svcmfcui", "extractor_type": "cmake", "context": "tlorach@@nvFX/cmake/FindSvcMFCUI.cmake", "confidence": "High"}], "type": "cmake", "libs": []}, {"deps": [{"depname": "cuda", "version": null, "version_op": null, "unified_name": "cuda", "extractor_type": "cmake", "context": "tlorach@@nvFX/cmake/FindCuda.cmake", "confidence": "High"}], "type": "cmake", "libs": []}, {"deps": [{"depname": "fxlibcuda", "version": null, "version_op": null, "unified_name": "fxlibcuda", "extractor_type": "cmake", "context": "project(fxlibcuda)", "confidence": ""}], "type": "cmake", "libs": []}, {"deps": [{"depname": "fxlibgl", "version": null, "version_op": null, "unified_name": "fxlibgl", "extractor_type": "cmake", "context": "project(fxlibgl)", "confidence": ""}], "type": "cmake", "libs": []}, {"deps": [{"depname": "fxlibd3d", "version": null, "version_op": null, "unified_name": "fxlibd3d", "extractor_type": "cmake", "context": "project(fxlibd3d)", "confidence": ""}], "type": "cmake", "libs": []}, {"deps": [{"depname": "fxlib", "version": null, "version_op": null, "unified_name": "fxlib", "extractor_type": "cmake", "context": "project(fxlib)", "confidence": ""}], "type": "cmake", "libs": []}, {"deps": [{"depname": "nvfxcc", "version": null, "version_op": null, "unified_name": "nvfxcc", "extractor_type": "cmake", "context": "project(nvfxcc)", "confidence": ""}], "type": "cmake", "libs": []}, {"deps": [{"depname": "fxparser", "version": null, "version_op": null, "unified_name": "fxparser", "extractor_type": "cmake", "context": "project(fxparser)", "confidence": ""}], "type": "cmake", "libs": []}, {"deps": [{"depname": "svcmfcui", "version": null, "version_op": null, "unified_name": "svcmfcui", "extractor_type": "cmake", "context": "find_package(svcmfcui)", "confidence": "High"}, {"depname": "zlib", "version": null, "version_op": null, "unified_name": "zlib", "extractor_type": "cmake", "context": "find_package(zlib)", "confidence": "High"}], "type": "cmake", "libs": []}, {"deps": [{"depname": "openglsimpleeffect_subroutine", "version": null, "version_op": null, "unified_name": "openglsimpleeffect_subroutine", "extractor_type": "cmake", "context": "project(openglsimpleeffect_subroutine)", "confidence": ""}], "type": "cmake", "libs": []}, {"deps": [{"depname": "opengl_glslcompute", "version": null, "version_op": null, "unified_name": "opengl_glslcompute", "extractor_type": "cmake", "context": "project(opengl_glslcompute)", "confidence": ""}], "type": "cmake", "libs": []}, {"deps": [{"depname": "opengl_gs_sparkles", "version": null, "version_op": null, "unified_name": "opengl_gs_sparkles", "extractor_type": "cmake", "context": "project(opengl_gs_sparkles)", "confidence": ""}], "type": "cmake", "libs": []}, {"deps": [{"depname": "shadertoyviewer", "version": null, "version_op": null, "unified_name": "shadertoyviewer", "extractor_type": "cmake", "context": "project(shadertoyviewer)", "confidence": ""}], "type": "cmake", "libs": []}, {"deps": [{"depname": "openglsimplesceneeffect", "version": null, "version_op": null, "unified_name": "openglsimplesceneeffect", "extractor_type": "cmake", "context": "project(openglsimplesceneeffect)", "confidence": ""}], "type": "cmake", "libs": []}, {"deps": [{"depname": "opengl_cudaconvolution", "version": null, "version_op": null, "unified_name": "opengl_cudaconvolution", "extractor_type": "cmake", "context": "project(opengl_cudaconvolution)", "confidence": ""}], "type": "cmake", "libs": []}, {"deps": [{"depname": "openglligthingeffect", "version": null, "version_op": null, "unified_name": "openglligthingeffect", "extractor_type": "cmake", "context": "project(openglligthingeffect)", "confidence": ""}], "type": "cmake", "libs": []}, {"deps": [{"depname": "openglsimpleshadowmap", "version": null, "version_op": null, "unified_name": "openglsimpleshadowmap", "extractor_type": "cmake", "context": "project(openglsimpleshadowmap)", "confidence": ""}], "type": "cmake", "libs": []}, {"deps": [{"depname": "openglsimpleeffect", "version": null, "version_op": null, "unified_name": "openglsimpleeffect", "extractor_type": "cmake", "context": "project(openglsimpleeffect)", "confidence": ""}], "type": "cmake", "libs": []}, {"deps": [{"depname": "openglsimpleeffect_pntriangles", "version": null, "version_op": null, "unified_name": "openglsimpleeffect_pntriangles", "extractor_type": "cmake", "context": "project(openglsimpleeffect_pntriangles)", "confidence": ""}], "type": "cmake", "libs": []}, {"deps": [{"depname": "d3dsimple", "version": null, "version_op": null, "unified_name": "d3dsimple", "extractor_type": "cmake", "context": "project(d3dsimple)", "confidence": ""}], "type": "cmake", "libs": []}, {"deps": [{"depname": "openglsimplesceneeffect", "version": null, "version_op": null, "unified_name": "openglsimplesceneeffect", "extractor_type": "cmake", "context": "project(openglsimplesceneeffect)", "confidence": ""}], "type": "cmake", "libs": []}, {"deps": [{"depname": "opengluniformupdateexample", "version": null, "version_op": null, "unified_name": "opengluniformupdateexample", "extractor_type": "cmake", "context": "project(opengluniformupdateexample)", "confidence": ""}], "type": "cmake", "libs": []}, {"deps": [{"depname": "openglfluitsimeffect", "version": null, "version_op": null, "unified_name": "openglfluitsimeffect", "extractor_type": "cmake", "context": "project(openglfluitsimeffect)", "confidence": ""}], "type": "cmake", "libs": []}, {"deps": [{"depname": "openglsimplesceneeffect", "version": null, "version_op": null, "unified_name": "openglsimplesceneeffect", "extractor_type": "cmake", "context": "project(openglsimplesceneeffect)", "confidence": ""}], "type": "cmake", "libs": []}, {"deps": [{"depname": "opengl_hdr_ibl_effect", "version": null, "version_op": null, "unified_name": "opengl_hdr_ibl_effect", "extractor_type": "cmake", "context": "project(opengl_hdr_ibl_effect)", "confidence": ""}], "type": "cmake", "libs": []}, {"deps": [{"depname": "openglsimpleeffect_skinning", "version": null, "version_op": null, "unified_name": "openglsimpleeffect_skinning", "extractor_type": "cmake", "context": "project(openglsimpleeffect_skinning)", "confidence": ""}], "type": "cmake", "libs": []}, {"deps": [{"depname": "openglsimplesceneeffect", "version": null, "version_op": null, "unified_name": "openglsimplesceneeffect", "extractor_type": "cmake", "context": "project(openglsimplesceneeffect)", "confidence": ""}], "type": "cmake", "libs": []}, {"deps": [{"depname": "fxliboptix", "version": null, "version_op": null, "unified_name": "fxliboptix", "extractor_type": "cmake", "context": "project(fxliboptix)", "confidence": ""}], "type": "cmake", "libs": []}]}